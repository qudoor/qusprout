/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef qusproutdata_TYPES_H
#define qusproutdata_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "ecode_types.h"




struct ExecCmdType {
  enum type {
    ExecTypeDefault = 0,
    ExecTypeCpuSingle = 1,
    ExecTypeCpuMpi = 2,
    ExecTypeGpuSingle = 3
  };
};

extern const std::map<int, const char*> _ExecCmdType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ExecCmdType::type& val);

std::string to_string(const ExecCmdType::type& val);

struct PauliOperType {
  enum type {
    POT_PAULI_I = 0,
    POT_PAULI_X = 1,
    POT_PAULI_Y = 2,
    POT_PAULI_Z = 3
  };
};

extern const std::map<int, const char*> _PauliOperType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PauliOperType::type& val);

std::string to_string(const PauliOperType::type& val);

class Amplitude;

class Matrix;

class Cmdex;

class Cmd;

class Circuit;

class MeasureResult;

class Outcome;

class Result;

class InitQubitsReq;

class InitQubitsResp;

class SendCircuitCmdReq;

class SendCircuitCmdResp;

class CancelCmdReq;

class CancelCmdResp;

class GetProbAmpReq;

class GetProbAmpResp;

class GetProbOfOutcomeReq;

class GetProbOfOutcomeResp;

class GetProbOfAllOutcomReq;

class GetProbOfAllOutcomResp;

class GetAllStateReq;

class GetAllStateResp;

class ApplyQFTReq;

class ApplyQFTResp;

class ApplyFullQFTReq;

class ApplyFullQFTResp;

class RunCircuitReq;

class RunCircuitResp;

class GetExpecPauliProdReq;

class GetExpecPauliProdResp;

class PauliProdInfo;

class GetExpecPauliSumReq;

class GetExpecPauliSumResp;

class MeasureQubitsReq;

class MeasureQubitsResp;

class GateMatrix;

class AddCustomGateByMatrixReq;

class AddCustomGateByMatrixResp;

class SubCircuit;

class AddSubCircuitReq;

class AddSubCircuitResp;

class AppendQubitsReq;

class AppendQubitsResp;

class ResetQubitsReq;

class ResetQubitsResp;

class GetStateOfAllQubitsReq;

class GetStateOfAllQubitsResp;

class GetProbabilitiesReq;

class GetProbabilitiesResp;


class Amplitude : public virtual ::apache::thrift::TBase {
 public:

  Amplitude(const Amplitude&);
  Amplitude& operator=(const Amplitude&);
  Amplitude() noexcept
            : startind(0),
              numamps(0) {
  }

  virtual ~Amplitude() noexcept;
  std::vector<double>  reals;
  std::vector<double>  imags;
  int32_t startind;
  int32_t numamps;

  void __set_reals(const std::vector<double> & val);

  void __set_imags(const std::vector<double> & val);

  void __set_startind(const int32_t val);

  void __set_numamps(const int32_t val);

  bool operator == (const Amplitude & rhs) const
  {
    if (!(reals == rhs.reals))
      return false;
    if (!(imags == rhs.imags))
      return false;
    if (!(startind == rhs.startind))
      return false;
    if (!(numamps == rhs.numamps))
      return false;
    return true;
  }
  bool operator != (const Amplitude &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Amplitude & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Amplitude &a, Amplitude &b);

std::ostream& operator<<(std::ostream& out, const Amplitude& obj);


class Matrix : public virtual ::apache::thrift::TBase {
 public:

  Matrix(const Matrix&);
  Matrix& operator=(const Matrix&);
  Matrix() noexcept
         : unitary(0) {
  }

  virtual ~Matrix() noexcept;
  std::vector<std::vector<double> >  reals;
  std::vector<std::vector<double> >  imags;
  bool unitary;

  void __set_reals(const std::vector<std::vector<double> > & val);

  void __set_imags(const std::vector<std::vector<double> > & val);

  void __set_unitary(const bool val);

  bool operator == (const Matrix & rhs) const
  {
    if (!(reals == rhs.reals))
      return false;
    if (!(imags == rhs.imags))
      return false;
    if (!(unitary == rhs.unitary))
      return false;
    return true;
  }
  bool operator != (const Matrix &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Matrix & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Matrix &a, Matrix &b);

std::ostream& operator<<(std::ostream& out, const Matrix& obj);

typedef struct _Cmdex__isset {
  _Cmdex__isset() : amp(false), mat(false) {}
  bool amp :1;
  bool mat :1;
} _Cmdex__isset;

class Cmdex : public virtual ::apache::thrift::TBase {
 public:

  Cmdex(const Cmdex&);
  Cmdex& operator=(const Cmdex&);
  Cmdex() noexcept {
  }

  virtual ~Cmdex() noexcept;
  Amplitude amp;
  Matrix mat;

  _Cmdex__isset __isset;

  void __set_amp(const Amplitude& val);

  void __set_mat(const Matrix& val);

  bool operator == (const Cmdex & rhs) const
  {
    if (__isset.amp != rhs.__isset.amp)
      return false;
    else if (__isset.amp && !(amp == rhs.amp))
      return false;
    if (__isset.mat != rhs.__isset.mat)
      return false;
    else if (__isset.mat && !(mat == rhs.mat))
      return false;
    return true;
  }
  bool operator != (const Cmdex &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cmdex & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cmdex &a, Cmdex &b);

std::ostream& operator<<(std::ostream& out, const Cmdex& obj);

typedef struct _Cmd__isset {
  _Cmd__isset() : cmdex(false) {}
  bool cmdex :1;
} _Cmd__isset;

class Cmd : public virtual ::apache::thrift::TBase {
 public:

  Cmd(const Cmd&);
  Cmd& operator=(const Cmd&);
  Cmd() noexcept
      : gate(),
        desc(),
        inverse(0) {
  }

  virtual ~Cmd() noexcept;
  std::string gate;
  std::vector<int32_t>  targets;
  std::vector<int32_t>  controls;
  std::vector<double>  rotation;
  std::string desc;
  bool inverse;
  Cmdex cmdex;

  _Cmd__isset __isset;

  void __set_gate(const std::string& val);

  void __set_targets(const std::vector<int32_t> & val);

  void __set_controls(const std::vector<int32_t> & val);

  void __set_rotation(const std::vector<double> & val);

  void __set_desc(const std::string& val);

  void __set_inverse(const bool val);

  void __set_cmdex(const Cmdex& val);

  bool operator == (const Cmd & rhs) const
  {
    if (!(gate == rhs.gate))
      return false;
    if (!(targets == rhs.targets))
      return false;
    if (!(controls == rhs.controls))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(inverse == rhs.inverse))
      return false;
    if (__isset.cmdex != rhs.__isset.cmdex)
      return false;
    else if (__isset.cmdex && !(cmdex == rhs.cmdex))
      return false;
    return true;
  }
  bool operator != (const Cmd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cmd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cmd &a, Cmd &b);

std::ostream& operator<<(std::ostream& out, const Cmd& obj);


class Circuit : public virtual ::apache::thrift::TBase {
 public:

  Circuit(const Circuit&);
  Circuit& operator=(const Circuit&);
  Circuit() noexcept {
  }

  virtual ~Circuit() noexcept;
  std::vector<Cmd>  cmds;

  void __set_cmds(const std::vector<Cmd> & val);

  bool operator == (const Circuit & rhs) const
  {
    if (!(cmds == rhs.cmds))
      return false;
    return true;
  }
  bool operator != (const Circuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Circuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Circuit &a, Circuit &b);

std::ostream& operator<<(std::ostream& out, const Circuit& obj);


class MeasureResult : public virtual ::apache::thrift::TBase {
 public:

  MeasureResult(const MeasureResult&) noexcept;
  MeasureResult& operator=(const MeasureResult&) noexcept;
  MeasureResult() noexcept
                : id(0),
                  value(0) {
  }

  virtual ~MeasureResult() noexcept;
  int32_t id;
  int32_t value;

  void __set_id(const int32_t val);

  void __set_value(const int32_t val);

  bool operator == (const MeasureResult & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MeasureResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureResult &a, MeasureResult &b);

std::ostream& operator<<(std::ostream& out, const MeasureResult& obj);


class Outcome : public virtual ::apache::thrift::TBase {
 public:

  Outcome(const Outcome&);
  Outcome& operator=(const Outcome&);
  Outcome() noexcept
          : bitstr(),
            count(0) {
  }

  virtual ~Outcome() noexcept;
  std::string bitstr;
  int32_t count;

  void __set_bitstr(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const Outcome & rhs) const
  {
    if (!(bitstr == rhs.bitstr))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const Outcome &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Outcome & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Outcome &a, Outcome &b);

std::ostream& operator<<(std::ostream& out, const Outcome& obj);


class Result : public virtual ::apache::thrift::TBase {
 public:

  Result(const Result&);
  Result& operator=(const Result&);
  Result() noexcept {
  }

  virtual ~Result() noexcept;
  std::vector<MeasureResult>  measureSet;
  std::vector<Outcome>  outcomeSet;

  void __set_measureSet(const std::vector<MeasureResult> & val);

  void __set_outcomeSet(const std::vector<Outcome> & val);

  bool operator == (const Result & rhs) const
  {
    if (!(measureSet == rhs.measureSet))
      return false;
    if (!(outcomeSet == rhs.outcomeSet))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

std::ostream& operator<<(std::ostream& out, const Result& obj);

typedef struct _InitQubitsReq__isset {
  _InitQubitsReq__isset() : density(false), exec_type(false), hosts(false) {}
  bool density :1;
  bool exec_type :1;
  bool hosts :1;
} _InitQubitsReq__isset;

class InitQubitsReq : public virtual ::apache::thrift::TBase {
 public:

  InitQubitsReq(const InitQubitsReq&);
  InitQubitsReq& operator=(const InitQubitsReq&);
  InitQubitsReq() noexcept
                : id(),
                  qubits(0),
                  density(0),
                  exec_type(static_cast<ExecCmdType::type>(0)) {
  }

  virtual ~InitQubitsReq() noexcept;
  std::string id;
  int32_t qubits;
  bool density;
  /**
   * 
   * @see ExecCmdType
   */
  ExecCmdType::type exec_type;
  std::vector<std::string>  hosts;

  _InitQubitsReq__isset __isset;

  void __set_id(const std::string& val);

  void __set_qubits(const int32_t val);

  void __set_density(const bool val);

  void __set_exec_type(const ExecCmdType::type val);

  void __set_hosts(const std::vector<std::string> & val);

  bool operator == (const InitQubitsReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(qubits == rhs.qubits))
      return false;
    if (__isset.density != rhs.__isset.density)
      return false;
    else if (__isset.density && !(density == rhs.density))
      return false;
    if (__isset.exec_type != rhs.__isset.exec_type)
      return false;
    else if (__isset.exec_type && !(exec_type == rhs.exec_type))
      return false;
    if (__isset.hosts != rhs.__isset.hosts)
      return false;
    else if (__isset.hosts && !(hosts == rhs.hosts))
      return false;
    return true;
  }
  bool operator != (const InitQubitsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitQubitsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitQubitsReq &a, InitQubitsReq &b);

std::ostream& operator<<(std::ostream& out, const InitQubitsReq& obj);


class InitQubitsResp : public virtual ::apache::thrift::TBase {
 public:

  InitQubitsResp(const InitQubitsResp&);
  InitQubitsResp& operator=(const InitQubitsResp&);
  InitQubitsResp() noexcept {
  }

  virtual ~InitQubitsResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const InitQubitsResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const InitQubitsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitQubitsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitQubitsResp &a, InitQubitsResp &b);

std::ostream& operator<<(std::ostream& out, const InitQubitsResp& obj);

typedef struct _SendCircuitCmdReq__isset {
  _SendCircuitCmdReq__isset() : circuit(false), final(false) {}
  bool circuit :1;
  bool final :1;
} _SendCircuitCmdReq__isset;

class SendCircuitCmdReq : public virtual ::apache::thrift::TBase {
 public:

  SendCircuitCmdReq(const SendCircuitCmdReq&);
  SendCircuitCmdReq& operator=(const SendCircuitCmdReq&);
  SendCircuitCmdReq() noexcept
                    : id(),
                      final(0) {
  }

  virtual ~SendCircuitCmdReq() noexcept;
  std::string id;
  Circuit circuit;
  bool final;

  _SendCircuitCmdReq__isset __isset;

  void __set_id(const std::string& val);

  void __set_circuit(const Circuit& val);

  void __set_final(const bool val);

  bool operator == (const SendCircuitCmdReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.circuit != rhs.__isset.circuit)
      return false;
    else if (__isset.circuit && !(circuit == rhs.circuit))
      return false;
    if (__isset.final != rhs.__isset.final)
      return false;
    else if (__isset.final && !(final == rhs.final))
      return false;
    return true;
  }
  bool operator != (const SendCircuitCmdReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendCircuitCmdReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendCircuitCmdReq &a, SendCircuitCmdReq &b);

std::ostream& operator<<(std::ostream& out, const SendCircuitCmdReq& obj);


class SendCircuitCmdResp : public virtual ::apache::thrift::TBase {
 public:

  SendCircuitCmdResp(const SendCircuitCmdResp&);
  SendCircuitCmdResp& operator=(const SendCircuitCmdResp&);
  SendCircuitCmdResp() noexcept {
  }

  virtual ~SendCircuitCmdResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const SendCircuitCmdResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const SendCircuitCmdResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendCircuitCmdResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendCircuitCmdResp &a, SendCircuitCmdResp &b);

std::ostream& operator<<(std::ostream& out, const SendCircuitCmdResp& obj);


class CancelCmdReq : public virtual ::apache::thrift::TBase {
 public:

  CancelCmdReq(const CancelCmdReq&);
  CancelCmdReq& operator=(const CancelCmdReq&);
  CancelCmdReq() noexcept
               : id() {
  }

  virtual ~CancelCmdReq() noexcept;
  std::string id;

  void __set_id(const std::string& val);

  bool operator == (const CancelCmdReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CancelCmdReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CancelCmdReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CancelCmdReq &a, CancelCmdReq &b);

std::ostream& operator<<(std::ostream& out, const CancelCmdReq& obj);


class CancelCmdResp : public virtual ::apache::thrift::TBase {
 public:

  CancelCmdResp(const CancelCmdResp&);
  CancelCmdResp& operator=(const CancelCmdResp&);
  CancelCmdResp() noexcept {
  }

  virtual ~CancelCmdResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const CancelCmdResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const CancelCmdResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CancelCmdResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CancelCmdResp &a, CancelCmdResp &b);

std::ostream& operator<<(std::ostream& out, const CancelCmdResp& obj);


class GetProbAmpReq : public virtual ::apache::thrift::TBase {
 public:

  GetProbAmpReq(const GetProbAmpReq&);
  GetProbAmpReq& operator=(const GetProbAmpReq&);
  GetProbAmpReq() noexcept
                : id(),
                  index(0) {
  }

  virtual ~GetProbAmpReq() noexcept;
  std::string id;
  int64_t index;

  void __set_id(const std::string& val);

  void __set_index(const int64_t val);

  bool operator == (const GetProbAmpReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const GetProbAmpReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbAmpReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbAmpReq &a, GetProbAmpReq &b);

std::ostream& operator<<(std::ostream& out, const GetProbAmpReq& obj);

typedef struct _GetProbAmpResp__isset {
  _GetProbAmpResp__isset() : amp(false) {}
  bool amp :1;
} _GetProbAmpResp__isset;

class GetProbAmpResp : public virtual ::apache::thrift::TBase {
 public:

  GetProbAmpResp(const GetProbAmpResp&);
  GetProbAmpResp& operator=(const GetProbAmpResp&);
  GetProbAmpResp() noexcept
                 : amp(0) {
  }

  virtual ~GetProbAmpResp() noexcept;
   ::BaseCode base;
  double amp;

  _GetProbAmpResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_amp(const double val);

  bool operator == (const GetProbAmpResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.amp != rhs.__isset.amp)
      return false;
    else if (__isset.amp && !(amp == rhs.amp))
      return false;
    return true;
  }
  bool operator != (const GetProbAmpResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbAmpResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbAmpResp &a, GetProbAmpResp &b);

std::ostream& operator<<(std::ostream& out, const GetProbAmpResp& obj);


class GetProbOfOutcomeReq : public virtual ::apache::thrift::TBase {
 public:

  GetProbOfOutcomeReq(const GetProbOfOutcomeReq&);
  GetProbOfOutcomeReq& operator=(const GetProbOfOutcomeReq&);
  GetProbOfOutcomeReq() noexcept
                      : id(),
                        qubit(0),
                        outcom(0) {
  }

  virtual ~GetProbOfOutcomeReq() noexcept;
  std::string id;
  int32_t qubit;
  int32_t outcom;

  void __set_id(const std::string& val);

  void __set_qubit(const int32_t val);

  void __set_outcom(const int32_t val);

  bool operator == (const GetProbOfOutcomeReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(qubit == rhs.qubit))
      return false;
    if (!(outcom == rhs.outcom))
      return false;
    return true;
  }
  bool operator != (const GetProbOfOutcomeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbOfOutcomeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbOfOutcomeReq &a, GetProbOfOutcomeReq &b);

std::ostream& operator<<(std::ostream& out, const GetProbOfOutcomeReq& obj);

typedef struct _GetProbOfOutcomeResp__isset {
  _GetProbOfOutcomeResp__isset() : pro_outcome(false) {}
  bool pro_outcome :1;
} _GetProbOfOutcomeResp__isset;

class GetProbOfOutcomeResp : public virtual ::apache::thrift::TBase {
 public:

  GetProbOfOutcomeResp(const GetProbOfOutcomeResp&);
  GetProbOfOutcomeResp& operator=(const GetProbOfOutcomeResp&);
  GetProbOfOutcomeResp() noexcept
                       : pro_outcome(0) {
  }

  virtual ~GetProbOfOutcomeResp() noexcept;
   ::BaseCode base;
  double pro_outcome;

  _GetProbOfOutcomeResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_pro_outcome(const double val);

  bool operator == (const GetProbOfOutcomeResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.pro_outcome != rhs.__isset.pro_outcome)
      return false;
    else if (__isset.pro_outcome && !(pro_outcome == rhs.pro_outcome))
      return false;
    return true;
  }
  bool operator != (const GetProbOfOutcomeResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbOfOutcomeResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbOfOutcomeResp &a, GetProbOfOutcomeResp &b);

std::ostream& operator<<(std::ostream& out, const GetProbOfOutcomeResp& obj);


class GetProbOfAllOutcomReq : public virtual ::apache::thrift::TBase {
 public:

  GetProbOfAllOutcomReq(const GetProbOfAllOutcomReq&);
  GetProbOfAllOutcomReq& operator=(const GetProbOfAllOutcomReq&);
  GetProbOfAllOutcomReq() noexcept
                        : id() {
  }

  virtual ~GetProbOfAllOutcomReq() noexcept;
  std::string id;
  std::vector<int32_t>  targets;

  void __set_id(const std::string& val);

  void __set_targets(const std::vector<int32_t> & val);

  bool operator == (const GetProbOfAllOutcomReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(targets == rhs.targets))
      return false;
    return true;
  }
  bool operator != (const GetProbOfAllOutcomReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbOfAllOutcomReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbOfAllOutcomReq &a, GetProbOfAllOutcomReq &b);

std::ostream& operator<<(std::ostream& out, const GetProbOfAllOutcomReq& obj);

typedef struct _GetProbOfAllOutcomResp__isset {
  _GetProbOfAllOutcomResp__isset() : pro_outcomes(false) {}
  bool pro_outcomes :1;
} _GetProbOfAllOutcomResp__isset;

class GetProbOfAllOutcomResp : public virtual ::apache::thrift::TBase {
 public:

  GetProbOfAllOutcomResp(const GetProbOfAllOutcomResp&);
  GetProbOfAllOutcomResp& operator=(const GetProbOfAllOutcomResp&);
  GetProbOfAllOutcomResp() noexcept {
  }

  virtual ~GetProbOfAllOutcomResp() noexcept;
   ::BaseCode base;
  std::vector<double>  pro_outcomes;

  _GetProbOfAllOutcomResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_pro_outcomes(const std::vector<double> & val);

  bool operator == (const GetProbOfAllOutcomResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.pro_outcomes != rhs.__isset.pro_outcomes)
      return false;
    else if (__isset.pro_outcomes && !(pro_outcomes == rhs.pro_outcomes))
      return false;
    return true;
  }
  bool operator != (const GetProbOfAllOutcomResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbOfAllOutcomResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbOfAllOutcomResp &a, GetProbOfAllOutcomResp &b);

std::ostream& operator<<(std::ostream& out, const GetProbOfAllOutcomResp& obj);


class GetAllStateReq : public virtual ::apache::thrift::TBase {
 public:

  GetAllStateReq(const GetAllStateReq&);
  GetAllStateReq& operator=(const GetAllStateReq&);
  GetAllStateReq() noexcept
                 : id() {
  }

  virtual ~GetAllStateReq() noexcept;
  std::string id;

  void __set_id(const std::string& val);

  bool operator == (const GetAllStateReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GetAllStateReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetAllStateReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllStateReq &a, GetAllStateReq &b);

std::ostream& operator<<(std::ostream& out, const GetAllStateReq& obj);

typedef struct _GetAllStateResp__isset {
  _GetAllStateResp__isset() : all_state(false) {}
  bool all_state :1;
} _GetAllStateResp__isset;

class GetAllStateResp : public virtual ::apache::thrift::TBase {
 public:

  GetAllStateResp(const GetAllStateResp&);
  GetAllStateResp& operator=(const GetAllStateResp&);
  GetAllStateResp() noexcept {
  }

  virtual ~GetAllStateResp() noexcept;
   ::BaseCode base;
  std::vector<std::string>  all_state;

  _GetAllStateResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_all_state(const std::vector<std::string> & val);

  bool operator == (const GetAllStateResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.all_state != rhs.__isset.all_state)
      return false;
    else if (__isset.all_state && !(all_state == rhs.all_state))
      return false;
    return true;
  }
  bool operator != (const GetAllStateResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetAllStateResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllStateResp &a, GetAllStateResp &b);

std::ostream& operator<<(std::ostream& out, const GetAllStateResp& obj);


class ApplyQFTReq : public virtual ::apache::thrift::TBase {
 public:

  ApplyQFTReq(const ApplyQFTReq&);
  ApplyQFTReq& operator=(const ApplyQFTReq&);
  ApplyQFTReq() noexcept
              : id() {
  }

  virtual ~ApplyQFTReq() noexcept;
  std::string id;
  std::vector<int32_t>  targets;

  void __set_id(const std::string& val);

  void __set_targets(const std::vector<int32_t> & val);

  bool operator == (const ApplyQFTReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(targets == rhs.targets))
      return false;
    return true;
  }
  bool operator != (const ApplyQFTReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyQFTReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplyQFTReq &a, ApplyQFTReq &b);

std::ostream& operator<<(std::ostream& out, const ApplyQFTReq& obj);


class ApplyQFTResp : public virtual ::apache::thrift::TBase {
 public:

  ApplyQFTResp(const ApplyQFTResp&);
  ApplyQFTResp& operator=(const ApplyQFTResp&);
  ApplyQFTResp() noexcept {
  }

  virtual ~ApplyQFTResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const ApplyQFTResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ApplyQFTResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyQFTResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplyQFTResp &a, ApplyQFTResp &b);

std::ostream& operator<<(std::ostream& out, const ApplyQFTResp& obj);


class ApplyFullQFTReq : public virtual ::apache::thrift::TBase {
 public:

  ApplyFullQFTReq(const ApplyFullQFTReq&);
  ApplyFullQFTReq& operator=(const ApplyFullQFTReq&);
  ApplyFullQFTReq() noexcept
                  : id() {
  }

  virtual ~ApplyFullQFTReq() noexcept;
  std::string id;

  void __set_id(const std::string& val);

  bool operator == (const ApplyFullQFTReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ApplyFullQFTReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyFullQFTReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplyFullQFTReq &a, ApplyFullQFTReq &b);

std::ostream& operator<<(std::ostream& out, const ApplyFullQFTReq& obj);


class ApplyFullQFTResp : public virtual ::apache::thrift::TBase {
 public:

  ApplyFullQFTResp(const ApplyFullQFTResp&);
  ApplyFullQFTResp& operator=(const ApplyFullQFTResp&);
  ApplyFullQFTResp() noexcept {
  }

  virtual ~ApplyFullQFTResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const ApplyFullQFTResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ApplyFullQFTResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyFullQFTResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplyFullQFTResp &a, ApplyFullQFTResp &b);

std::ostream& operator<<(std::ostream& out, const ApplyFullQFTResp& obj);


class RunCircuitReq : public virtual ::apache::thrift::TBase {
 public:

  RunCircuitReq(const RunCircuitReq&);
  RunCircuitReq& operator=(const RunCircuitReq&);
  RunCircuitReq() noexcept
                : id(),
                  shots(0) {
  }

  virtual ~RunCircuitReq() noexcept;
  std::string id;
  int32_t shots;

  void __set_id(const std::string& val);

  void __set_shots(const int32_t val);

  bool operator == (const RunCircuitReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(shots == rhs.shots))
      return false;
    return true;
  }
  bool operator != (const RunCircuitReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunCircuitReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunCircuitReq &a, RunCircuitReq &b);

std::ostream& operator<<(std::ostream& out, const RunCircuitReq& obj);

typedef struct _RunCircuitResp__isset {
  _RunCircuitResp__isset() : result(false) {}
  bool result :1;
} _RunCircuitResp__isset;

class RunCircuitResp : public virtual ::apache::thrift::TBase {
 public:

  RunCircuitResp(const RunCircuitResp&);
  RunCircuitResp& operator=(const RunCircuitResp&);
  RunCircuitResp() noexcept {
  }

  virtual ~RunCircuitResp() noexcept;
   ::BaseCode base;
  Result result;

  _RunCircuitResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_result(const Result& val);

  bool operator == (const RunCircuitResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const RunCircuitResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunCircuitResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunCircuitResp &a, RunCircuitResp &b);

std::ostream& operator<<(std::ostream& out, const RunCircuitResp& obj);


class GetExpecPauliProdReq : public virtual ::apache::thrift::TBase {
 public:

  GetExpecPauliProdReq(const GetExpecPauliProdReq&);
  GetExpecPauliProdReq& operator=(const GetExpecPauliProdReq&);
  GetExpecPauliProdReq() noexcept
                       : id() {
  }

  virtual ~GetExpecPauliProdReq() noexcept;
  std::string id;
  std::vector<PauliProdInfo>  pauli_prod;

  void __set_id(const std::string& val);

  void __set_pauli_prod(const std::vector<PauliProdInfo> & val);

  bool operator == (const GetExpecPauliProdReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(pauli_prod == rhs.pauli_prod))
      return false;
    return true;
  }
  bool operator != (const GetExpecPauliProdReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetExpecPauliProdReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetExpecPauliProdReq &a, GetExpecPauliProdReq &b);

std::ostream& operator<<(std::ostream& out, const GetExpecPauliProdReq& obj);

typedef struct _GetExpecPauliProdResp__isset {
  _GetExpecPauliProdResp__isset() : expect(false) {}
  bool expect :1;
} _GetExpecPauliProdResp__isset;

class GetExpecPauliProdResp : public virtual ::apache::thrift::TBase {
 public:

  GetExpecPauliProdResp(const GetExpecPauliProdResp&);
  GetExpecPauliProdResp& operator=(const GetExpecPauliProdResp&);
  GetExpecPauliProdResp() noexcept
                        : expect(0) {
  }

  virtual ~GetExpecPauliProdResp() noexcept;
   ::BaseCode base;
  double expect;

  _GetExpecPauliProdResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_expect(const double val);

  bool operator == (const GetExpecPauliProdResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.expect != rhs.__isset.expect)
      return false;
    else if (__isset.expect && !(expect == rhs.expect))
      return false;
    return true;
  }
  bool operator != (const GetExpecPauliProdResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetExpecPauliProdResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetExpecPauliProdResp &a, GetExpecPauliProdResp &b);

std::ostream& operator<<(std::ostream& out, const GetExpecPauliProdResp& obj);


class PauliProdInfo : public virtual ::apache::thrift::TBase {
 public:

  PauliProdInfo(const PauliProdInfo&) noexcept;
  PauliProdInfo& operator=(const PauliProdInfo&) noexcept;
  PauliProdInfo() noexcept
                : oper_type(static_cast<PauliOperType::type>(0)),
                  target(0) {
  }

  virtual ~PauliProdInfo() noexcept;
  /**
   * 
   * @see PauliOperType
   */
  PauliOperType::type oper_type;
  int32_t target;

  void __set_oper_type(const PauliOperType::type val);

  void __set_target(const int32_t val);

  bool operator == (const PauliProdInfo & rhs) const
  {
    if (!(oper_type == rhs.oper_type))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const PauliProdInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PauliProdInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PauliProdInfo &a, PauliProdInfo &b);

std::ostream& operator<<(std::ostream& out, const PauliProdInfo& obj);

typedef struct _GetExpecPauliSumReq__isset {
  _GetExpecPauliSumReq__isset() : term_coeff_list(false) {}
  bool term_coeff_list :1;
} _GetExpecPauliSumReq__isset;

class GetExpecPauliSumReq : public virtual ::apache::thrift::TBase {
 public:

  GetExpecPauliSumReq(const GetExpecPauliSumReq&);
  GetExpecPauliSumReq& operator=(const GetExpecPauliSumReq&);
  GetExpecPauliSumReq() noexcept
                      : id() {
  }

  virtual ~GetExpecPauliSumReq() noexcept;
  std::string id;
  std::vector<PauliOperType::type>  oper_type_list;
  std::vector<double>  term_coeff_list;

  _GetExpecPauliSumReq__isset __isset;

  void __set_id(const std::string& val);

  void __set_oper_type_list(const std::vector<PauliOperType::type> & val);

  void __set_term_coeff_list(const std::vector<double> & val);

  bool operator == (const GetExpecPauliSumReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(oper_type_list == rhs.oper_type_list))
      return false;
    if (__isset.term_coeff_list != rhs.__isset.term_coeff_list)
      return false;
    else if (__isset.term_coeff_list && !(term_coeff_list == rhs.term_coeff_list))
      return false;
    return true;
  }
  bool operator != (const GetExpecPauliSumReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetExpecPauliSumReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetExpecPauliSumReq &a, GetExpecPauliSumReq &b);

std::ostream& operator<<(std::ostream& out, const GetExpecPauliSumReq& obj);

typedef struct _GetExpecPauliSumResp__isset {
  _GetExpecPauliSumResp__isset() : expect(false) {}
  bool expect :1;
} _GetExpecPauliSumResp__isset;

class GetExpecPauliSumResp : public virtual ::apache::thrift::TBase {
 public:

  GetExpecPauliSumResp(const GetExpecPauliSumResp&);
  GetExpecPauliSumResp& operator=(const GetExpecPauliSumResp&);
  GetExpecPauliSumResp() noexcept
                       : expect(0) {
  }

  virtual ~GetExpecPauliSumResp() noexcept;
   ::BaseCode base;
  double expect;

  _GetExpecPauliSumResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_expect(const double val);

  bool operator == (const GetExpecPauliSumResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.expect != rhs.__isset.expect)
      return false;
    else if (__isset.expect && !(expect == rhs.expect))
      return false;
    return true;
  }
  bool operator != (const GetExpecPauliSumResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetExpecPauliSumResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetExpecPauliSumResp &a, GetExpecPauliSumResp &b);

std::ostream& operator<<(std::ostream& out, const GetExpecPauliSumResp& obj);


class MeasureQubitsReq : public virtual ::apache::thrift::TBase {
 public:

  MeasureQubitsReq(const MeasureQubitsReq&);
  MeasureQubitsReq& operator=(const MeasureQubitsReq&);
  MeasureQubitsReq() noexcept
                   : id() {
  }

  virtual ~MeasureQubitsReq() noexcept;
  std::string id;
  std::vector<int32_t>  qubits;

  void __set_id(const std::string& val);

  void __set_qubits(const std::vector<int32_t> & val);

  bool operator == (const MeasureQubitsReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(qubits == rhs.qubits))
      return false;
    return true;
  }
  bool operator != (const MeasureQubitsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureQubitsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureQubitsReq &a, MeasureQubitsReq &b);

std::ostream& operator<<(std::ostream& out, const MeasureQubitsReq& obj);

typedef struct _MeasureQubitsResp__isset {
  _MeasureQubitsResp__isset() : results(false) {}
  bool results :1;
} _MeasureQubitsResp__isset;

class MeasureQubitsResp : public virtual ::apache::thrift::TBase {
 public:

  MeasureQubitsResp(const MeasureQubitsResp&);
  MeasureQubitsResp& operator=(const MeasureQubitsResp&);
  MeasureQubitsResp() noexcept {
  }

  virtual ~MeasureQubitsResp() noexcept;
   ::BaseCode base;
  std::vector<MeasureResult>  results;
  std::vector<Outcome>  outcomes;

  _MeasureQubitsResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_results(const std::vector<MeasureResult> & val);

  void __set_outcomes(const std::vector<Outcome> & val);

  bool operator == (const MeasureQubitsResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.results != rhs.__isset.results)
      return false;
    else if (__isset.results && !(results == rhs.results))
      return false;
    if (!(outcomes == rhs.outcomes))
      return false;
    return true;
  }
  bool operator != (const MeasureQubitsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureQubitsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureQubitsResp &a, MeasureQubitsResp &b);

std::ostream& operator<<(std::ostream& out, const MeasureQubitsResp& obj);


class GateMatrix : public virtual ::apache::thrift::TBase {
 public:

  GateMatrix(const GateMatrix&);
  GateMatrix& operator=(const GateMatrix&);
  GateMatrix() noexcept
             : name(),
               qubits(0) {
  }

  virtual ~GateMatrix() noexcept;
  std::string name;
  int32_t qubits;
  std::vector<double>  matrix;

  void __set_name(const std::string& val);

  void __set_qubits(const int32_t val);

  void __set_matrix(const std::vector<double> & val);

  bool operator == (const GateMatrix & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(qubits == rhs.qubits))
      return false;
    if (!(matrix == rhs.matrix))
      return false;
    return true;
  }
  bool operator != (const GateMatrix &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateMatrix & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GateMatrix &a, GateMatrix &b);

std::ostream& operator<<(std::ostream& out, const GateMatrix& obj);


class AddCustomGateByMatrixReq : public virtual ::apache::thrift::TBase {
 public:

  AddCustomGateByMatrixReq(const AddCustomGateByMatrixReq&);
  AddCustomGateByMatrixReq& operator=(const AddCustomGateByMatrixReq&);
  AddCustomGateByMatrixReq() noexcept
                           : id() {
  }

  virtual ~AddCustomGateByMatrixReq() noexcept;
  std::string id;
  GateMatrix gate;

  void __set_id(const std::string& val);

  void __set_gate(const GateMatrix& val);

  bool operator == (const AddCustomGateByMatrixReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(gate == rhs.gate))
      return false;
    return true;
  }
  bool operator != (const AddCustomGateByMatrixReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCustomGateByMatrixReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddCustomGateByMatrixReq &a, AddCustomGateByMatrixReq &b);

std::ostream& operator<<(std::ostream& out, const AddCustomGateByMatrixReq& obj);


class AddCustomGateByMatrixResp : public virtual ::apache::thrift::TBase {
 public:

  AddCustomGateByMatrixResp(const AddCustomGateByMatrixResp&);
  AddCustomGateByMatrixResp& operator=(const AddCustomGateByMatrixResp&);
  AddCustomGateByMatrixResp() noexcept {
  }

  virtual ~AddCustomGateByMatrixResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const AddCustomGateByMatrixResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const AddCustomGateByMatrixResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCustomGateByMatrixResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddCustomGateByMatrixResp &a, AddCustomGateByMatrixResp &b);

std::ostream& operator<<(std::ostream& out, const AddCustomGateByMatrixResp& obj);


class SubCircuit : public virtual ::apache::thrift::TBase {
 public:

  SubCircuit(const SubCircuit&);
  SubCircuit& operator=(const SubCircuit&);
  SubCircuit() noexcept
             : name() {
  }

  virtual ~SubCircuit() noexcept;
  std::string name;
  Circuit circuit;

  void __set_name(const std::string& val);

  void __set_circuit(const Circuit& val);

  bool operator == (const SubCircuit & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(circuit == rhs.circuit))
      return false;
    return true;
  }
  bool operator != (const SubCircuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubCircuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubCircuit &a, SubCircuit &b);

std::ostream& operator<<(std::ostream& out, const SubCircuit& obj);


class AddSubCircuitReq : public virtual ::apache::thrift::TBase {
 public:

  AddSubCircuitReq(const AddSubCircuitReq&);
  AddSubCircuitReq& operator=(const AddSubCircuitReq&);
  AddSubCircuitReq() noexcept
                   : id() {
  }

  virtual ~AddSubCircuitReq() noexcept;
  std::string id;
  SubCircuit sub_circuit;

  void __set_id(const std::string& val);

  void __set_sub_circuit(const SubCircuit& val);

  bool operator == (const AddSubCircuitReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(sub_circuit == rhs.sub_circuit))
      return false;
    return true;
  }
  bool operator != (const AddSubCircuitReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddSubCircuitReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddSubCircuitReq &a, AddSubCircuitReq &b);

std::ostream& operator<<(std::ostream& out, const AddSubCircuitReq& obj);


class AddSubCircuitResp : public virtual ::apache::thrift::TBase {
 public:

  AddSubCircuitResp(const AddSubCircuitResp&);
  AddSubCircuitResp& operator=(const AddSubCircuitResp&);
  AddSubCircuitResp() noexcept {
  }

  virtual ~AddSubCircuitResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const AddSubCircuitResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const AddSubCircuitResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddSubCircuitResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddSubCircuitResp &a, AddSubCircuitResp &b);

std::ostream& operator<<(std::ostream& out, const AddSubCircuitResp& obj);


class AppendQubitsReq : public virtual ::apache::thrift::TBase {
 public:

  AppendQubitsReq(const AppendQubitsReq&);
  AppendQubitsReq& operator=(const AppendQubitsReq&);
  AppendQubitsReq() noexcept
                  : id(),
                    qubits(0) {
  }

  virtual ~AppendQubitsReq() noexcept;
  std::string id;
  int32_t qubits;

  void __set_id(const std::string& val);

  void __set_qubits(const int32_t val);

  bool operator == (const AppendQubitsReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(qubits == rhs.qubits))
      return false;
    return true;
  }
  bool operator != (const AppendQubitsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendQubitsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendQubitsReq &a, AppendQubitsReq &b);

std::ostream& operator<<(std::ostream& out, const AppendQubitsReq& obj);


class AppendQubitsResp : public virtual ::apache::thrift::TBase {
 public:

  AppendQubitsResp(const AppendQubitsResp&);
  AppendQubitsResp& operator=(const AppendQubitsResp&);
  AppendQubitsResp() noexcept {
  }

  virtual ~AppendQubitsResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const AppendQubitsResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const AppendQubitsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendQubitsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendQubitsResp &a, AppendQubitsResp &b);

std::ostream& operator<<(std::ostream& out, const AppendQubitsResp& obj);


class ResetQubitsReq : public virtual ::apache::thrift::TBase {
 public:

  ResetQubitsReq(const ResetQubitsReq&);
  ResetQubitsReq& operator=(const ResetQubitsReq&);
  ResetQubitsReq() noexcept
                 : id() {
  }

  virtual ~ResetQubitsReq() noexcept;
  std::string id;
  std::vector<int32_t>  qubits;

  void __set_id(const std::string& val);

  void __set_qubits(const std::vector<int32_t> & val);

  bool operator == (const ResetQubitsReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(qubits == rhs.qubits))
      return false;
    return true;
  }
  bool operator != (const ResetQubitsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetQubitsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResetQubitsReq &a, ResetQubitsReq &b);

std::ostream& operator<<(std::ostream& out, const ResetQubitsReq& obj);


class ResetQubitsResp : public virtual ::apache::thrift::TBase {
 public:

  ResetQubitsResp(const ResetQubitsResp&);
  ResetQubitsResp& operator=(const ResetQubitsResp&);
  ResetQubitsResp() noexcept {
  }

  virtual ~ResetQubitsResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const ResetQubitsResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ResetQubitsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetQubitsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResetQubitsResp &a, ResetQubitsResp &b);

std::ostream& operator<<(std::ostream& out, const ResetQubitsResp& obj);


class GetStateOfAllQubitsReq : public virtual ::apache::thrift::TBase {
 public:

  GetStateOfAllQubitsReq(const GetStateOfAllQubitsReq&);
  GetStateOfAllQubitsReq& operator=(const GetStateOfAllQubitsReq&);
  GetStateOfAllQubitsReq() noexcept
                         : id() {
  }

  virtual ~GetStateOfAllQubitsReq() noexcept;
  std::string id;

  void __set_id(const std::string& val);

  bool operator == (const GetStateOfAllQubitsReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GetStateOfAllQubitsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetStateOfAllQubitsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetStateOfAllQubitsReq &a, GetStateOfAllQubitsReq &b);

std::ostream& operator<<(std::ostream& out, const GetStateOfAllQubitsReq& obj);

typedef struct _GetStateOfAllQubitsResp__isset {
  _GetStateOfAllQubitsResp__isset() : state_vector(false) {}
  bool state_vector :1;
} _GetStateOfAllQubitsResp__isset;

class GetStateOfAllQubitsResp : public virtual ::apache::thrift::TBase {
 public:

  GetStateOfAllQubitsResp(const GetStateOfAllQubitsResp&);
  GetStateOfAllQubitsResp& operator=(const GetStateOfAllQubitsResp&);
  GetStateOfAllQubitsResp() noexcept {
  }

  virtual ~GetStateOfAllQubitsResp() noexcept;
   ::BaseCode base;
  std::vector<double>  state_vector;

  _GetStateOfAllQubitsResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_state_vector(const std::vector<double> & val);

  bool operator == (const GetStateOfAllQubitsResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (!(state_vector == rhs.state_vector))
      return false;
    return true;
  }
  bool operator != (const GetStateOfAllQubitsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetStateOfAllQubitsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetStateOfAllQubitsResp &a, GetStateOfAllQubitsResp &b);

std::ostream& operator<<(std::ostream& out, const GetStateOfAllQubitsResp& obj);


class GetProbabilitiesReq : public virtual ::apache::thrift::TBase {
 public:

  GetProbabilitiesReq(const GetProbabilitiesReq&);
  GetProbabilitiesReq& operator=(const GetProbabilitiesReq&);
  GetProbabilitiesReq() noexcept
                      : id() {
  }

  virtual ~GetProbabilitiesReq() noexcept;
  std::string id;

  void __set_id(const std::string& val);

  bool operator == (const GetProbabilitiesReq & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GetProbabilitiesReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbabilitiesReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbabilitiesReq &a, GetProbabilitiesReq &b);

std::ostream& operator<<(std::ostream& out, const GetProbabilitiesReq& obj);

typedef struct _GetProbabilitiesResp__isset {
  _GetProbabilitiesResp__isset() : probabilities(false) {}
  bool probabilities :1;
} _GetProbabilitiesResp__isset;

class GetProbabilitiesResp : public virtual ::apache::thrift::TBase {
 public:

  GetProbabilitiesResp(const GetProbabilitiesResp&);
  GetProbabilitiesResp& operator=(const GetProbabilitiesResp&);
  GetProbabilitiesResp() noexcept {
  }

  virtual ~GetProbabilitiesResp() noexcept;
   ::BaseCode base;
  std::vector<double>  probabilities;

  _GetProbabilitiesResp__isset __isset;

  void __set_base(const  ::BaseCode& val);

  void __set_probabilities(const std::vector<double> & val);

  bool operator == (const GetProbabilitiesResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    if (__isset.probabilities != rhs.__isset.probabilities)
      return false;
    else if (__isset.probabilities && !(probabilities == rhs.probabilities))
      return false;
    return true;
  }
  bool operator != (const GetProbabilitiesResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProbabilitiesResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProbabilitiesResp &a, GetProbabilitiesResp &b);

std::ostream& operator<<(std::ostream& out, const GetProbabilitiesResp& obj);



#endif
