/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MasterServer_H
#define MasterServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "resource_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MasterServerIf {
 public:
  virtual ~MasterServerIf() {}
  virtual void registerResource(RegisterResp& _return, const RegisterReq& req) = 0;
  virtual void unRegister(UnRegisterResp& _return, const UnRegisterReq& req) = 0;
  virtual void heartbeat(HeartbeatResp& _return, const HeartbeatReq& req) = 0;
};

class MasterServerIfFactory {
 public:
  typedef MasterServerIf Handler;

  virtual ~MasterServerIfFactory() {}

  virtual MasterServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MasterServerIf* /* handler */) = 0;
  };

class MasterServerIfSingletonFactory : virtual public MasterServerIfFactory {
 public:
  MasterServerIfSingletonFactory(const ::std::shared_ptr<MasterServerIf>& iface) : iface_(iface) {}
  virtual ~MasterServerIfSingletonFactory() {}

  virtual MasterServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MasterServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MasterServerIf> iface_;
};

class MasterServerNull : virtual public MasterServerIf {
 public:
  virtual ~MasterServerNull() {}
  void registerResource(RegisterResp& /* _return */, const RegisterReq& /* req */) override {
    return;
  }
  void unRegister(UnRegisterResp& /* _return */, const UnRegisterReq& /* req */) override {
    return;
  }
  void heartbeat(HeartbeatResp& /* _return */, const HeartbeatReq& /* req */) override {
    return;
  }
};

typedef struct _MasterServer_registerResource_args__isset {
  _MasterServer_registerResource_args__isset() : req(false) {}
  bool req :1;
} _MasterServer_registerResource_args__isset;

class MasterServer_registerResource_args {
 public:

  MasterServer_registerResource_args(const MasterServer_registerResource_args&);
  MasterServer_registerResource_args& operator=(const MasterServer_registerResource_args&);
  MasterServer_registerResource_args() noexcept {
  }

  virtual ~MasterServer_registerResource_args() noexcept;
  RegisterReq req;

  _MasterServer_registerResource_args__isset __isset;

  void __set_req(const RegisterReq& val);

  bool operator == (const MasterServer_registerResource_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const MasterServer_registerResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_registerResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterServer_registerResource_pargs {
 public:


  virtual ~MasterServer_registerResource_pargs() noexcept;
  const RegisterReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_registerResource_result__isset {
  _MasterServer_registerResource_result__isset() : success(false) {}
  bool success :1;
} _MasterServer_registerResource_result__isset;

class MasterServer_registerResource_result {
 public:

  MasterServer_registerResource_result(const MasterServer_registerResource_result&);
  MasterServer_registerResource_result& operator=(const MasterServer_registerResource_result&);
  MasterServer_registerResource_result() noexcept {
  }

  virtual ~MasterServer_registerResource_result() noexcept;
  RegisterResp success;

  _MasterServer_registerResource_result__isset __isset;

  void __set_success(const RegisterResp& val);

  bool operator == (const MasterServer_registerResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterServer_registerResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_registerResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_registerResource_presult__isset {
  _MasterServer_registerResource_presult__isset() : success(false) {}
  bool success :1;
} _MasterServer_registerResource_presult__isset;

class MasterServer_registerResource_presult {
 public:


  virtual ~MasterServer_registerResource_presult() noexcept;
  RegisterResp* success;

  _MasterServer_registerResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterServer_unRegister_args__isset {
  _MasterServer_unRegister_args__isset() : req(false) {}
  bool req :1;
} _MasterServer_unRegister_args__isset;

class MasterServer_unRegister_args {
 public:

  MasterServer_unRegister_args(const MasterServer_unRegister_args&);
  MasterServer_unRegister_args& operator=(const MasterServer_unRegister_args&);
  MasterServer_unRegister_args() noexcept {
  }

  virtual ~MasterServer_unRegister_args() noexcept;
  UnRegisterReq req;

  _MasterServer_unRegister_args__isset __isset;

  void __set_req(const UnRegisterReq& val);

  bool operator == (const MasterServer_unRegister_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const MasterServer_unRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_unRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterServer_unRegister_pargs {
 public:


  virtual ~MasterServer_unRegister_pargs() noexcept;
  const UnRegisterReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_unRegister_result__isset {
  _MasterServer_unRegister_result__isset() : success(false) {}
  bool success :1;
} _MasterServer_unRegister_result__isset;

class MasterServer_unRegister_result {
 public:

  MasterServer_unRegister_result(const MasterServer_unRegister_result&);
  MasterServer_unRegister_result& operator=(const MasterServer_unRegister_result&);
  MasterServer_unRegister_result() noexcept {
  }

  virtual ~MasterServer_unRegister_result() noexcept;
  UnRegisterResp success;

  _MasterServer_unRegister_result__isset __isset;

  void __set_success(const UnRegisterResp& val);

  bool operator == (const MasterServer_unRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterServer_unRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_unRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_unRegister_presult__isset {
  _MasterServer_unRegister_presult__isset() : success(false) {}
  bool success :1;
} _MasterServer_unRegister_presult__isset;

class MasterServer_unRegister_presult {
 public:


  virtual ~MasterServer_unRegister_presult() noexcept;
  UnRegisterResp* success;

  _MasterServer_unRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterServer_heartbeat_args__isset {
  _MasterServer_heartbeat_args__isset() : req(false) {}
  bool req :1;
} _MasterServer_heartbeat_args__isset;

class MasterServer_heartbeat_args {
 public:

  MasterServer_heartbeat_args(const MasterServer_heartbeat_args&);
  MasterServer_heartbeat_args& operator=(const MasterServer_heartbeat_args&);
  MasterServer_heartbeat_args() noexcept {
  }

  virtual ~MasterServer_heartbeat_args() noexcept;
  HeartbeatReq req;

  _MasterServer_heartbeat_args__isset __isset;

  void __set_req(const HeartbeatReq& val);

  bool operator == (const MasterServer_heartbeat_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const MasterServer_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterServer_heartbeat_pargs {
 public:


  virtual ~MasterServer_heartbeat_pargs() noexcept;
  const HeartbeatReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_heartbeat_result__isset {
  _MasterServer_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _MasterServer_heartbeat_result__isset;

class MasterServer_heartbeat_result {
 public:

  MasterServer_heartbeat_result(const MasterServer_heartbeat_result&);
  MasterServer_heartbeat_result& operator=(const MasterServer_heartbeat_result&);
  MasterServer_heartbeat_result() noexcept {
  }

  virtual ~MasterServer_heartbeat_result() noexcept;
  HeartbeatResp success;

  _MasterServer_heartbeat_result__isset __isset;

  void __set_success(const HeartbeatResp& val);

  bool operator == (const MasterServer_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterServer_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterServer_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterServer_heartbeat_presult__isset {
  _MasterServer_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _MasterServer_heartbeat_presult__isset;

class MasterServer_heartbeat_presult {
 public:


  virtual ~MasterServer_heartbeat_presult() noexcept;
  HeartbeatResp* success;

  _MasterServer_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MasterServerClient : virtual public MasterServerIf {
 public:
  MasterServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MasterServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerResource(RegisterResp& _return, const RegisterReq& req) override;
  void send_registerResource(const RegisterReq& req);
  void recv_registerResource(RegisterResp& _return);
  void unRegister(UnRegisterResp& _return, const UnRegisterReq& req) override;
  void send_unRegister(const UnRegisterReq& req);
  void recv_unRegister(UnRegisterResp& _return);
  void heartbeat(HeartbeatResp& _return, const HeartbeatReq& req) override;
  void send_heartbeat(const HeartbeatReq& req);
  void recv_heartbeat(HeartbeatResp& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MasterServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MasterServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (MasterServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MasterServerProcessor(::std::shared_ptr<MasterServerIf> iface) :
    iface_(iface) {
    processMap_["registerResource"] = &MasterServerProcessor::process_registerResource;
    processMap_["unRegister"] = &MasterServerProcessor::process_unRegister;
    processMap_["heartbeat"] = &MasterServerProcessor::process_heartbeat;
  }

  virtual ~MasterServerProcessor() {}
};

class MasterServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MasterServerProcessorFactory(const ::std::shared_ptr< MasterServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MasterServerIfFactory > handlerFactory_;
};

class MasterServerMultiface : virtual public MasterServerIf {
 public:
  MasterServerMultiface(std::vector<std::shared_ptr<MasterServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MasterServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<MasterServerIf> > ifaces_;
  MasterServerMultiface() {}
  void add(::std::shared_ptr<MasterServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void registerResource(RegisterResp& _return, const RegisterReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerResource(_return, req);
    }
    ifaces_[i]->registerResource(_return, req);
    return;
  }

  void unRegister(UnRegisterResp& _return, const UnRegisterReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unRegister(_return, req);
    }
    ifaces_[i]->unRegister(_return, req);
    return;
  }

  void heartbeat(HeartbeatResp& _return, const HeartbeatReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return, req);
    }
    ifaces_[i]->heartbeat(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MasterServerConcurrentClient : virtual public MasterServerIf {
 public:
  MasterServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MasterServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerResource(RegisterResp& _return, const RegisterReq& req) override;
  int32_t send_registerResource(const RegisterReq& req);
  void recv_registerResource(RegisterResp& _return, const int32_t seqid);
  void unRegister(UnRegisterResp& _return, const UnRegisterReq& req) override;
  int32_t send_unRegister(const UnRegisterReq& req);
  void recv_unRegister(UnRegisterResp& _return, const int32_t seqid);
  void heartbeat(HeartbeatResp& _return, const HeartbeatReq& req) override;
  int32_t send_heartbeat(const HeartbeatReq& req);
  void recv_heartbeat(HeartbeatResp& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
