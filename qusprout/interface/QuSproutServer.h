/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QuSproutServer_H
#define QuSproutServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "qusprout_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QuSproutServerIf {
 public:
  virtual ~QuSproutServerIf() {}
  virtual void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) = 0;
  virtual void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) = 0;
  virtual void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) = 0;
  virtual void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) = 0;
  virtual void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) = 0;
  virtual void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) = 0;
  virtual void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) = 0;
  virtual void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) = 0;
  virtual void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) = 0;
  virtual void measureQubits( ::MeasureQubitsResp& _return, const  ::MeasureQubitsReq& req) = 0;
  virtual void addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return, const  ::AddCustomGateByMatrixReq& req) = 0;
  virtual void addSubCircuit( ::AddSubCircuitResp& _return, const  ::AddSubCircuitReq& req) = 0;
  virtual void appendQubits( ::AppendQubitsResp& _return, const  ::AppendQubitsReq& req) = 0;
  virtual void resetQubits( ::ResetQubitsResp& _return, const  ::ResetQubitsReq& req) = 0;
  virtual void getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return, const  ::GetStateOfAllQubitsReq& req) = 0;
  virtual void getProbabilities( ::GetProbabilitiesResp& _return, const  ::GetProbabilitiesReq& req) = 0;
  virtual void getTaskInfo( ::GetTaskInfoResp& _return, const  ::GetTaskInfoReq& req) = 0;
  virtual void getRandomCardInfo( ::GetRandomCardInfoResp& _return, const  ::GetRandomCardInfoReq& req) = 0;
  virtual void setRandomCard( ::SetRandomCardResp& _return, const  ::SetRandomCardReq& req) = 0;
  virtual void getRandom( ::GetRandomResp& _return, const  ::GetRandomReq& req) = 0;
};

class QuSproutServerIfFactory {
 public:
  typedef QuSproutServerIf Handler;

  virtual ~QuSproutServerIfFactory() {}

  virtual QuSproutServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuSproutServerIf* /* handler */) = 0;
  };

class QuSproutServerIfSingletonFactory : virtual public QuSproutServerIfFactory {
 public:
  QuSproutServerIfSingletonFactory(const ::std::shared_ptr<QuSproutServerIf>& iface) : iface_(iface) {}
  virtual ~QuSproutServerIfSingletonFactory() {}

  virtual QuSproutServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(QuSproutServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<QuSproutServerIf> iface_;
};

class QuSproutServerNull : virtual public QuSproutServerIf {
 public:
  virtual ~QuSproutServerNull() {}
  void initQubits( ::InitQubitsResp& /* _return */, const  ::InitQubitsReq& /* req */) override {
    return;
  }
  void sendCircuitCmd( ::SendCircuitCmdResp& /* _return */, const  ::SendCircuitCmdReq& /* req */) override {
    return;
  }
  void cancelCmd( ::CancelCmdResp& /* _return */, const  ::CancelCmdReq& /* req */) override {
    return;
  }
  void getProbAmp( ::GetProbAmpResp& /* _return */, const  ::GetProbAmpReq& /* req */) override {
    return;
  }
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& /* _return */, const  ::GetProbOfAllOutcomReq& /* req */) override {
    return;
  }
  void getAllState( ::GetAllStateResp& /* _return */, const  ::GetAllStateReq& /* req */) override {
    return;
  }
  void run( ::RunCircuitResp& /* _return */, const  ::RunCircuitReq& /* req */) override {
    return;
  }
  void getExpecPauliProd( ::GetExpecPauliProdResp& /* _return */, const  ::GetExpecPauliProdReq& /* req */) override {
    return;
  }
  void getExpecPauliSum( ::GetExpecPauliSumResp& /* _return */, const  ::GetExpecPauliSumReq& /* req */) override {
    return;
  }
  void measureQubits( ::MeasureQubitsResp& /* _return */, const  ::MeasureQubitsReq& /* req */) override {
    return;
  }
  void addCustomGateByMatrix( ::AddCustomGateByMatrixResp& /* _return */, const  ::AddCustomGateByMatrixReq& /* req */) override {
    return;
  }
  void addSubCircuit( ::AddSubCircuitResp& /* _return */, const  ::AddSubCircuitReq& /* req */) override {
    return;
  }
  void appendQubits( ::AppendQubitsResp& /* _return */, const  ::AppendQubitsReq& /* req */) override {
    return;
  }
  void resetQubits( ::ResetQubitsResp& /* _return */, const  ::ResetQubitsReq& /* req */) override {
    return;
  }
  void getStateOfAllQubits( ::GetStateOfAllQubitsResp& /* _return */, const  ::GetStateOfAllQubitsReq& /* req */) override {
    return;
  }
  void getProbabilities( ::GetProbabilitiesResp& /* _return */, const  ::GetProbabilitiesReq& /* req */) override {
    return;
  }
  void getTaskInfo( ::GetTaskInfoResp& /* _return */, const  ::GetTaskInfoReq& /* req */) override {
    return;
  }
  void getRandomCardInfo( ::GetRandomCardInfoResp& /* _return */, const  ::GetRandomCardInfoReq& /* req */) override {
    return;
  }
  void setRandomCard( ::SetRandomCardResp& /* _return */, const  ::SetRandomCardReq& /* req */) override {
    return;
  }
  void getRandom( ::GetRandomResp& /* _return */, const  ::GetRandomReq& /* req */) override {
    return;
  }
};

typedef struct _QuSproutServer_initQubits_args__isset {
  _QuSproutServer_initQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_initQubits_args__isset;

class QuSproutServer_initQubits_args {
 public:

  QuSproutServer_initQubits_args(const QuSproutServer_initQubits_args&);
  QuSproutServer_initQubits_args& operator=(const QuSproutServer_initQubits_args&);
  QuSproutServer_initQubits_args() noexcept {
  }

  virtual ~QuSproutServer_initQubits_args() noexcept;
   ::InitQubitsReq req;

  _QuSproutServer_initQubits_args__isset __isset;

  void __set_req(const  ::InitQubitsReq& val);

  bool operator == (const QuSproutServer_initQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_initQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_initQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_initQubits_pargs {
 public:


  virtual ~QuSproutServer_initQubits_pargs() noexcept;
  const  ::InitQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_initQubits_result__isset {
  _QuSproutServer_initQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_initQubits_result__isset;

class QuSproutServer_initQubits_result {
 public:

  QuSproutServer_initQubits_result(const QuSproutServer_initQubits_result&);
  QuSproutServer_initQubits_result& operator=(const QuSproutServer_initQubits_result&);
  QuSproutServer_initQubits_result() noexcept {
  }

  virtual ~QuSproutServer_initQubits_result() noexcept;
   ::InitQubitsResp success;

  _QuSproutServer_initQubits_result__isset __isset;

  void __set_success(const  ::InitQubitsResp& val);

  bool operator == (const QuSproutServer_initQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_initQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_initQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_initQubits_presult__isset {
  _QuSproutServer_initQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_initQubits_presult__isset;

class QuSproutServer_initQubits_presult {
 public:


  virtual ~QuSproutServer_initQubits_presult() noexcept;
   ::InitQubitsResp* success;

  _QuSproutServer_initQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_sendCircuitCmd_args__isset {
  _QuSproutServer_sendCircuitCmd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_sendCircuitCmd_args__isset;

class QuSproutServer_sendCircuitCmd_args {
 public:

  QuSproutServer_sendCircuitCmd_args(const QuSproutServer_sendCircuitCmd_args&);
  QuSproutServer_sendCircuitCmd_args& operator=(const QuSproutServer_sendCircuitCmd_args&);
  QuSproutServer_sendCircuitCmd_args() noexcept {
  }

  virtual ~QuSproutServer_sendCircuitCmd_args() noexcept;
   ::SendCircuitCmdReq req;

  _QuSproutServer_sendCircuitCmd_args__isset __isset;

  void __set_req(const  ::SendCircuitCmdReq& val);

  bool operator == (const QuSproutServer_sendCircuitCmd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_sendCircuitCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_sendCircuitCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_sendCircuitCmd_pargs {
 public:


  virtual ~QuSproutServer_sendCircuitCmd_pargs() noexcept;
  const  ::SendCircuitCmdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_sendCircuitCmd_result__isset {
  _QuSproutServer_sendCircuitCmd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_sendCircuitCmd_result__isset;

class QuSproutServer_sendCircuitCmd_result {
 public:

  QuSproutServer_sendCircuitCmd_result(const QuSproutServer_sendCircuitCmd_result&);
  QuSproutServer_sendCircuitCmd_result& operator=(const QuSproutServer_sendCircuitCmd_result&);
  QuSproutServer_sendCircuitCmd_result() noexcept {
  }

  virtual ~QuSproutServer_sendCircuitCmd_result() noexcept;
   ::SendCircuitCmdResp success;

  _QuSproutServer_sendCircuitCmd_result__isset __isset;

  void __set_success(const  ::SendCircuitCmdResp& val);

  bool operator == (const QuSproutServer_sendCircuitCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_sendCircuitCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_sendCircuitCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_sendCircuitCmd_presult__isset {
  _QuSproutServer_sendCircuitCmd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_sendCircuitCmd_presult__isset;

class QuSproutServer_sendCircuitCmd_presult {
 public:


  virtual ~QuSproutServer_sendCircuitCmd_presult() noexcept;
   ::SendCircuitCmdResp* success;

  _QuSproutServer_sendCircuitCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_cancelCmd_args__isset {
  _QuSproutServer_cancelCmd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_cancelCmd_args__isset;

class QuSproutServer_cancelCmd_args {
 public:

  QuSproutServer_cancelCmd_args(const QuSproutServer_cancelCmd_args&);
  QuSproutServer_cancelCmd_args& operator=(const QuSproutServer_cancelCmd_args&);
  QuSproutServer_cancelCmd_args() noexcept {
  }

  virtual ~QuSproutServer_cancelCmd_args() noexcept;
   ::CancelCmdReq req;

  _QuSproutServer_cancelCmd_args__isset __isset;

  void __set_req(const  ::CancelCmdReq& val);

  bool operator == (const QuSproutServer_cancelCmd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_cancelCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_cancelCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_cancelCmd_pargs {
 public:


  virtual ~QuSproutServer_cancelCmd_pargs() noexcept;
  const  ::CancelCmdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_cancelCmd_result__isset {
  _QuSproutServer_cancelCmd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_cancelCmd_result__isset;

class QuSproutServer_cancelCmd_result {
 public:

  QuSproutServer_cancelCmd_result(const QuSproutServer_cancelCmd_result&);
  QuSproutServer_cancelCmd_result& operator=(const QuSproutServer_cancelCmd_result&);
  QuSproutServer_cancelCmd_result() noexcept {
  }

  virtual ~QuSproutServer_cancelCmd_result() noexcept;
   ::CancelCmdResp success;

  _QuSproutServer_cancelCmd_result__isset __isset;

  void __set_success(const  ::CancelCmdResp& val);

  bool operator == (const QuSproutServer_cancelCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_cancelCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_cancelCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_cancelCmd_presult__isset {
  _QuSproutServer_cancelCmd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_cancelCmd_presult__isset;

class QuSproutServer_cancelCmd_presult {
 public:


  virtual ~QuSproutServer_cancelCmd_presult() noexcept;
   ::CancelCmdResp* success;

  _QuSproutServer_cancelCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbAmp_args__isset {
  _QuSproutServer_getProbAmp_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbAmp_args__isset;

class QuSproutServer_getProbAmp_args {
 public:

  QuSproutServer_getProbAmp_args(const QuSproutServer_getProbAmp_args&);
  QuSproutServer_getProbAmp_args& operator=(const QuSproutServer_getProbAmp_args&);
  QuSproutServer_getProbAmp_args() noexcept {
  }

  virtual ~QuSproutServer_getProbAmp_args() noexcept;
   ::GetProbAmpReq req;

  _QuSproutServer_getProbAmp_args__isset __isset;

  void __set_req(const  ::GetProbAmpReq& val);

  bool operator == (const QuSproutServer_getProbAmp_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbAmp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbAmp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbAmp_pargs {
 public:


  virtual ~QuSproutServer_getProbAmp_pargs() noexcept;
  const  ::GetProbAmpReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbAmp_result__isset {
  _QuSproutServer_getProbAmp_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbAmp_result__isset;

class QuSproutServer_getProbAmp_result {
 public:

  QuSproutServer_getProbAmp_result(const QuSproutServer_getProbAmp_result&);
  QuSproutServer_getProbAmp_result& operator=(const QuSproutServer_getProbAmp_result&);
  QuSproutServer_getProbAmp_result() noexcept {
  }

  virtual ~QuSproutServer_getProbAmp_result() noexcept;
   ::GetProbAmpResp success;

  _QuSproutServer_getProbAmp_result__isset __isset;

  void __set_success(const  ::GetProbAmpResp& val);

  bool operator == (const QuSproutServer_getProbAmp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbAmp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbAmp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbAmp_presult__isset {
  _QuSproutServer_getProbAmp_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbAmp_presult__isset;

class QuSproutServer_getProbAmp_presult {
 public:


  virtual ~QuSproutServer_getProbAmp_presult() noexcept;
   ::GetProbAmpResp* success;

  _QuSproutServer_getProbAmp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbOfAllOutcome_args__isset {
  _QuSproutServer_getProbOfAllOutcome_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbOfAllOutcome_args__isset;

class QuSproutServer_getProbOfAllOutcome_args {
 public:

  QuSproutServer_getProbOfAllOutcome_args(const QuSproutServer_getProbOfAllOutcome_args&);
  QuSproutServer_getProbOfAllOutcome_args& operator=(const QuSproutServer_getProbOfAllOutcome_args&);
  QuSproutServer_getProbOfAllOutcome_args() noexcept {
  }

  virtual ~QuSproutServer_getProbOfAllOutcome_args() noexcept;
   ::GetProbOfAllOutcomReq req;

  _QuSproutServer_getProbOfAllOutcome_args__isset __isset;

  void __set_req(const  ::GetProbOfAllOutcomReq& val);

  bool operator == (const QuSproutServer_getProbOfAllOutcome_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfAllOutcome_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfAllOutcome_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbOfAllOutcome_pargs {
 public:


  virtual ~QuSproutServer_getProbOfAllOutcome_pargs() noexcept;
  const  ::GetProbOfAllOutcomReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfAllOutcome_result__isset {
  _QuSproutServer_getProbOfAllOutcome_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfAllOutcome_result__isset;

class QuSproutServer_getProbOfAllOutcome_result {
 public:

  QuSproutServer_getProbOfAllOutcome_result(const QuSproutServer_getProbOfAllOutcome_result&);
  QuSproutServer_getProbOfAllOutcome_result& operator=(const QuSproutServer_getProbOfAllOutcome_result&);
  QuSproutServer_getProbOfAllOutcome_result() noexcept {
  }

  virtual ~QuSproutServer_getProbOfAllOutcome_result() noexcept;
   ::GetProbOfAllOutcomResp success;

  _QuSproutServer_getProbOfAllOutcome_result__isset __isset;

  void __set_success(const  ::GetProbOfAllOutcomResp& val);

  bool operator == (const QuSproutServer_getProbOfAllOutcome_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfAllOutcome_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfAllOutcome_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfAllOutcome_presult__isset {
  _QuSproutServer_getProbOfAllOutcome_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfAllOutcome_presult__isset;

class QuSproutServer_getProbOfAllOutcome_presult {
 public:


  virtual ~QuSproutServer_getProbOfAllOutcome_presult() noexcept;
   ::GetProbOfAllOutcomResp* success;

  _QuSproutServer_getProbOfAllOutcome_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getAllState_args__isset {
  _QuSproutServer_getAllState_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getAllState_args__isset;

class QuSproutServer_getAllState_args {
 public:

  QuSproutServer_getAllState_args(const QuSproutServer_getAllState_args&);
  QuSproutServer_getAllState_args& operator=(const QuSproutServer_getAllState_args&);
  QuSproutServer_getAllState_args() noexcept {
  }

  virtual ~QuSproutServer_getAllState_args() noexcept;
   ::GetAllStateReq req;

  _QuSproutServer_getAllState_args__isset __isset;

  void __set_req(const  ::GetAllStateReq& val);

  bool operator == (const QuSproutServer_getAllState_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getAllState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getAllState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getAllState_pargs {
 public:


  virtual ~QuSproutServer_getAllState_pargs() noexcept;
  const  ::GetAllStateReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getAllState_result__isset {
  _QuSproutServer_getAllState_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getAllState_result__isset;

class QuSproutServer_getAllState_result {
 public:

  QuSproutServer_getAllState_result(const QuSproutServer_getAllState_result&);
  QuSproutServer_getAllState_result& operator=(const QuSproutServer_getAllState_result&);
  QuSproutServer_getAllState_result() noexcept {
  }

  virtual ~QuSproutServer_getAllState_result() noexcept;
   ::GetAllStateResp success;

  _QuSproutServer_getAllState_result__isset __isset;

  void __set_success(const  ::GetAllStateResp& val);

  bool operator == (const QuSproutServer_getAllState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getAllState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getAllState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getAllState_presult__isset {
  _QuSproutServer_getAllState_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getAllState_presult__isset;

class QuSproutServer_getAllState_presult {
 public:


  virtual ~QuSproutServer_getAllState_presult() noexcept;
   ::GetAllStateResp* success;

  _QuSproutServer_getAllState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_run_args__isset {
  _QuSproutServer_run_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_run_args__isset;

class QuSproutServer_run_args {
 public:

  QuSproutServer_run_args(const QuSproutServer_run_args&);
  QuSproutServer_run_args& operator=(const QuSproutServer_run_args&);
  QuSproutServer_run_args() noexcept {
  }

  virtual ~QuSproutServer_run_args() noexcept;
   ::RunCircuitReq req;

  _QuSproutServer_run_args__isset __isset;

  void __set_req(const  ::RunCircuitReq& val);

  bool operator == (const QuSproutServer_run_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_run_pargs {
 public:


  virtual ~QuSproutServer_run_pargs() noexcept;
  const  ::RunCircuitReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_run_result__isset {
  _QuSproutServer_run_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_run_result__isset;

class QuSproutServer_run_result {
 public:

  QuSproutServer_run_result(const QuSproutServer_run_result&);
  QuSproutServer_run_result& operator=(const QuSproutServer_run_result&);
  QuSproutServer_run_result() noexcept {
  }

  virtual ~QuSproutServer_run_result() noexcept;
   ::RunCircuitResp success;

  _QuSproutServer_run_result__isset __isset;

  void __set_success(const  ::RunCircuitResp& val);

  bool operator == (const QuSproutServer_run_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_run_presult__isset {
  _QuSproutServer_run_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_run_presult__isset;

class QuSproutServer_run_presult {
 public:


  virtual ~QuSproutServer_run_presult() noexcept;
   ::RunCircuitResp* success;

  _QuSproutServer_run_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getExpecPauliProd_args__isset {
  _QuSproutServer_getExpecPauliProd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getExpecPauliProd_args__isset;

class QuSproutServer_getExpecPauliProd_args {
 public:

  QuSproutServer_getExpecPauliProd_args(const QuSproutServer_getExpecPauliProd_args&);
  QuSproutServer_getExpecPauliProd_args& operator=(const QuSproutServer_getExpecPauliProd_args&);
  QuSproutServer_getExpecPauliProd_args() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliProd_args() noexcept;
   ::GetExpecPauliProdReq req;

  _QuSproutServer_getExpecPauliProd_args__isset __isset;

  void __set_req(const  ::GetExpecPauliProdReq& val);

  bool operator == (const QuSproutServer_getExpecPauliProd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliProd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliProd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getExpecPauliProd_pargs {
 public:


  virtual ~QuSproutServer_getExpecPauliProd_pargs() noexcept;
  const  ::GetExpecPauliProdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliProd_result__isset {
  _QuSproutServer_getExpecPauliProd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliProd_result__isset;

class QuSproutServer_getExpecPauliProd_result {
 public:

  QuSproutServer_getExpecPauliProd_result(const QuSproutServer_getExpecPauliProd_result&);
  QuSproutServer_getExpecPauliProd_result& operator=(const QuSproutServer_getExpecPauliProd_result&);
  QuSproutServer_getExpecPauliProd_result() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliProd_result() noexcept;
   ::GetExpecPauliProdResp success;

  _QuSproutServer_getExpecPauliProd_result__isset __isset;

  void __set_success(const  ::GetExpecPauliProdResp& val);

  bool operator == (const QuSproutServer_getExpecPauliProd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliProd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliProd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliProd_presult__isset {
  _QuSproutServer_getExpecPauliProd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliProd_presult__isset;

class QuSproutServer_getExpecPauliProd_presult {
 public:


  virtual ~QuSproutServer_getExpecPauliProd_presult() noexcept;
   ::GetExpecPauliProdResp* success;

  _QuSproutServer_getExpecPauliProd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getExpecPauliSum_args__isset {
  _QuSproutServer_getExpecPauliSum_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getExpecPauliSum_args__isset;

class QuSproutServer_getExpecPauliSum_args {
 public:

  QuSproutServer_getExpecPauliSum_args(const QuSproutServer_getExpecPauliSum_args&);
  QuSproutServer_getExpecPauliSum_args& operator=(const QuSproutServer_getExpecPauliSum_args&);
  QuSproutServer_getExpecPauliSum_args() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliSum_args() noexcept;
   ::GetExpecPauliSumReq req;

  _QuSproutServer_getExpecPauliSum_args__isset __isset;

  void __set_req(const  ::GetExpecPauliSumReq& val);

  bool operator == (const QuSproutServer_getExpecPauliSum_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliSum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliSum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getExpecPauliSum_pargs {
 public:


  virtual ~QuSproutServer_getExpecPauliSum_pargs() noexcept;
  const  ::GetExpecPauliSumReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliSum_result__isset {
  _QuSproutServer_getExpecPauliSum_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliSum_result__isset;

class QuSproutServer_getExpecPauliSum_result {
 public:

  QuSproutServer_getExpecPauliSum_result(const QuSproutServer_getExpecPauliSum_result&);
  QuSproutServer_getExpecPauliSum_result& operator=(const QuSproutServer_getExpecPauliSum_result&);
  QuSproutServer_getExpecPauliSum_result() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliSum_result() noexcept;
   ::GetExpecPauliSumResp success;

  _QuSproutServer_getExpecPauliSum_result__isset __isset;

  void __set_success(const  ::GetExpecPauliSumResp& val);

  bool operator == (const QuSproutServer_getExpecPauliSum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliSum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliSum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliSum_presult__isset {
  _QuSproutServer_getExpecPauliSum_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliSum_presult__isset;

class QuSproutServer_getExpecPauliSum_presult {
 public:


  virtual ~QuSproutServer_getExpecPauliSum_presult() noexcept;
   ::GetExpecPauliSumResp* success;

  _QuSproutServer_getExpecPauliSum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_measureQubits_args__isset {
  _QuSproutServer_measureQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_measureQubits_args__isset;

class QuSproutServer_measureQubits_args {
 public:

  QuSproutServer_measureQubits_args(const QuSproutServer_measureQubits_args&);
  QuSproutServer_measureQubits_args& operator=(const QuSproutServer_measureQubits_args&);
  QuSproutServer_measureQubits_args() noexcept {
  }

  virtual ~QuSproutServer_measureQubits_args() noexcept;
   ::MeasureQubitsReq req;

  _QuSproutServer_measureQubits_args__isset __isset;

  void __set_req(const  ::MeasureQubitsReq& val);

  bool operator == (const QuSproutServer_measureQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_measureQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_measureQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_measureQubits_pargs {
 public:


  virtual ~QuSproutServer_measureQubits_pargs() noexcept;
  const  ::MeasureQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_measureQubits_result__isset {
  _QuSproutServer_measureQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_measureQubits_result__isset;

class QuSproutServer_measureQubits_result {
 public:

  QuSproutServer_measureQubits_result(const QuSproutServer_measureQubits_result&);
  QuSproutServer_measureQubits_result& operator=(const QuSproutServer_measureQubits_result&);
  QuSproutServer_measureQubits_result() noexcept {
  }

  virtual ~QuSproutServer_measureQubits_result() noexcept;
   ::MeasureQubitsResp success;

  _QuSproutServer_measureQubits_result__isset __isset;

  void __set_success(const  ::MeasureQubitsResp& val);

  bool operator == (const QuSproutServer_measureQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_measureQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_measureQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_measureQubits_presult__isset {
  _QuSproutServer_measureQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_measureQubits_presult__isset;

class QuSproutServer_measureQubits_presult {
 public:


  virtual ~QuSproutServer_measureQubits_presult() noexcept;
   ::MeasureQubitsResp* success;

  _QuSproutServer_measureQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_addCustomGateByMatrix_args__isset {
  _QuSproutServer_addCustomGateByMatrix_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_addCustomGateByMatrix_args__isset;

class QuSproutServer_addCustomGateByMatrix_args {
 public:

  QuSproutServer_addCustomGateByMatrix_args(const QuSproutServer_addCustomGateByMatrix_args&);
  QuSproutServer_addCustomGateByMatrix_args& operator=(const QuSproutServer_addCustomGateByMatrix_args&);
  QuSproutServer_addCustomGateByMatrix_args() noexcept {
  }

  virtual ~QuSproutServer_addCustomGateByMatrix_args() noexcept;
   ::AddCustomGateByMatrixReq req;

  _QuSproutServer_addCustomGateByMatrix_args__isset __isset;

  void __set_req(const  ::AddCustomGateByMatrixReq& val);

  bool operator == (const QuSproutServer_addCustomGateByMatrix_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_addCustomGateByMatrix_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_addCustomGateByMatrix_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_addCustomGateByMatrix_pargs {
 public:


  virtual ~QuSproutServer_addCustomGateByMatrix_pargs() noexcept;
  const  ::AddCustomGateByMatrixReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_addCustomGateByMatrix_result__isset {
  _QuSproutServer_addCustomGateByMatrix_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_addCustomGateByMatrix_result__isset;

class QuSproutServer_addCustomGateByMatrix_result {
 public:

  QuSproutServer_addCustomGateByMatrix_result(const QuSproutServer_addCustomGateByMatrix_result&);
  QuSproutServer_addCustomGateByMatrix_result& operator=(const QuSproutServer_addCustomGateByMatrix_result&);
  QuSproutServer_addCustomGateByMatrix_result() noexcept {
  }

  virtual ~QuSproutServer_addCustomGateByMatrix_result() noexcept;
   ::AddCustomGateByMatrixResp success;

  _QuSproutServer_addCustomGateByMatrix_result__isset __isset;

  void __set_success(const  ::AddCustomGateByMatrixResp& val);

  bool operator == (const QuSproutServer_addCustomGateByMatrix_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_addCustomGateByMatrix_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_addCustomGateByMatrix_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_addCustomGateByMatrix_presult__isset {
  _QuSproutServer_addCustomGateByMatrix_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_addCustomGateByMatrix_presult__isset;

class QuSproutServer_addCustomGateByMatrix_presult {
 public:


  virtual ~QuSproutServer_addCustomGateByMatrix_presult() noexcept;
   ::AddCustomGateByMatrixResp* success;

  _QuSproutServer_addCustomGateByMatrix_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_addSubCircuit_args__isset {
  _QuSproutServer_addSubCircuit_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_addSubCircuit_args__isset;

class QuSproutServer_addSubCircuit_args {
 public:

  QuSproutServer_addSubCircuit_args(const QuSproutServer_addSubCircuit_args&);
  QuSproutServer_addSubCircuit_args& operator=(const QuSproutServer_addSubCircuit_args&);
  QuSproutServer_addSubCircuit_args() noexcept {
  }

  virtual ~QuSproutServer_addSubCircuit_args() noexcept;
   ::AddSubCircuitReq req;

  _QuSproutServer_addSubCircuit_args__isset __isset;

  void __set_req(const  ::AddSubCircuitReq& val);

  bool operator == (const QuSproutServer_addSubCircuit_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_addSubCircuit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_addSubCircuit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_addSubCircuit_pargs {
 public:


  virtual ~QuSproutServer_addSubCircuit_pargs() noexcept;
  const  ::AddSubCircuitReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_addSubCircuit_result__isset {
  _QuSproutServer_addSubCircuit_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_addSubCircuit_result__isset;

class QuSproutServer_addSubCircuit_result {
 public:

  QuSproutServer_addSubCircuit_result(const QuSproutServer_addSubCircuit_result&);
  QuSproutServer_addSubCircuit_result& operator=(const QuSproutServer_addSubCircuit_result&);
  QuSproutServer_addSubCircuit_result() noexcept {
  }

  virtual ~QuSproutServer_addSubCircuit_result() noexcept;
   ::AddSubCircuitResp success;

  _QuSproutServer_addSubCircuit_result__isset __isset;

  void __set_success(const  ::AddSubCircuitResp& val);

  bool operator == (const QuSproutServer_addSubCircuit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_addSubCircuit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_addSubCircuit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_addSubCircuit_presult__isset {
  _QuSproutServer_addSubCircuit_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_addSubCircuit_presult__isset;

class QuSproutServer_addSubCircuit_presult {
 public:


  virtual ~QuSproutServer_addSubCircuit_presult() noexcept;
   ::AddSubCircuitResp* success;

  _QuSproutServer_addSubCircuit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_appendQubits_args__isset {
  _QuSproutServer_appendQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_appendQubits_args__isset;

class QuSproutServer_appendQubits_args {
 public:

  QuSproutServer_appendQubits_args(const QuSproutServer_appendQubits_args&);
  QuSproutServer_appendQubits_args& operator=(const QuSproutServer_appendQubits_args&);
  QuSproutServer_appendQubits_args() noexcept {
  }

  virtual ~QuSproutServer_appendQubits_args() noexcept;
   ::AppendQubitsReq req;

  _QuSproutServer_appendQubits_args__isset __isset;

  void __set_req(const  ::AppendQubitsReq& val);

  bool operator == (const QuSproutServer_appendQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_appendQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_appendQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_appendQubits_pargs {
 public:


  virtual ~QuSproutServer_appendQubits_pargs() noexcept;
  const  ::AppendQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_appendQubits_result__isset {
  _QuSproutServer_appendQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_appendQubits_result__isset;

class QuSproutServer_appendQubits_result {
 public:

  QuSproutServer_appendQubits_result(const QuSproutServer_appendQubits_result&);
  QuSproutServer_appendQubits_result& operator=(const QuSproutServer_appendQubits_result&);
  QuSproutServer_appendQubits_result() noexcept {
  }

  virtual ~QuSproutServer_appendQubits_result() noexcept;
   ::AppendQubitsResp success;

  _QuSproutServer_appendQubits_result__isset __isset;

  void __set_success(const  ::AppendQubitsResp& val);

  bool operator == (const QuSproutServer_appendQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_appendQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_appendQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_appendQubits_presult__isset {
  _QuSproutServer_appendQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_appendQubits_presult__isset;

class QuSproutServer_appendQubits_presult {
 public:


  virtual ~QuSproutServer_appendQubits_presult() noexcept;
   ::AppendQubitsResp* success;

  _QuSproutServer_appendQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_resetQubits_args__isset {
  _QuSproutServer_resetQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_resetQubits_args__isset;

class QuSproutServer_resetQubits_args {
 public:

  QuSproutServer_resetQubits_args(const QuSproutServer_resetQubits_args&);
  QuSproutServer_resetQubits_args& operator=(const QuSproutServer_resetQubits_args&);
  QuSproutServer_resetQubits_args() noexcept {
  }

  virtual ~QuSproutServer_resetQubits_args() noexcept;
   ::ResetQubitsReq req;

  _QuSproutServer_resetQubits_args__isset __isset;

  void __set_req(const  ::ResetQubitsReq& val);

  bool operator == (const QuSproutServer_resetQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_resetQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_resetQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_resetQubits_pargs {
 public:


  virtual ~QuSproutServer_resetQubits_pargs() noexcept;
  const  ::ResetQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_resetQubits_result__isset {
  _QuSproutServer_resetQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_resetQubits_result__isset;

class QuSproutServer_resetQubits_result {
 public:

  QuSproutServer_resetQubits_result(const QuSproutServer_resetQubits_result&);
  QuSproutServer_resetQubits_result& operator=(const QuSproutServer_resetQubits_result&);
  QuSproutServer_resetQubits_result() noexcept {
  }

  virtual ~QuSproutServer_resetQubits_result() noexcept;
   ::ResetQubitsResp success;

  _QuSproutServer_resetQubits_result__isset __isset;

  void __set_success(const  ::ResetQubitsResp& val);

  bool operator == (const QuSproutServer_resetQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_resetQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_resetQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_resetQubits_presult__isset {
  _QuSproutServer_resetQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_resetQubits_presult__isset;

class QuSproutServer_resetQubits_presult {
 public:


  virtual ~QuSproutServer_resetQubits_presult() noexcept;
   ::ResetQubitsResp* success;

  _QuSproutServer_resetQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getStateOfAllQubits_args__isset {
  _QuSproutServer_getStateOfAllQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getStateOfAllQubits_args__isset;

class QuSproutServer_getStateOfAllQubits_args {
 public:

  QuSproutServer_getStateOfAllQubits_args(const QuSproutServer_getStateOfAllQubits_args&);
  QuSproutServer_getStateOfAllQubits_args& operator=(const QuSproutServer_getStateOfAllQubits_args&);
  QuSproutServer_getStateOfAllQubits_args() noexcept {
  }

  virtual ~QuSproutServer_getStateOfAllQubits_args() noexcept;
   ::GetStateOfAllQubitsReq req;

  _QuSproutServer_getStateOfAllQubits_args__isset __isset;

  void __set_req(const  ::GetStateOfAllQubitsReq& val);

  bool operator == (const QuSproutServer_getStateOfAllQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getStateOfAllQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getStateOfAllQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getStateOfAllQubits_pargs {
 public:


  virtual ~QuSproutServer_getStateOfAllQubits_pargs() noexcept;
  const  ::GetStateOfAllQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getStateOfAllQubits_result__isset {
  _QuSproutServer_getStateOfAllQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getStateOfAllQubits_result__isset;

class QuSproutServer_getStateOfAllQubits_result {
 public:

  QuSproutServer_getStateOfAllQubits_result(const QuSproutServer_getStateOfAllQubits_result&);
  QuSproutServer_getStateOfAllQubits_result& operator=(const QuSproutServer_getStateOfAllQubits_result&);
  QuSproutServer_getStateOfAllQubits_result() noexcept {
  }

  virtual ~QuSproutServer_getStateOfAllQubits_result() noexcept;
   ::GetStateOfAllQubitsResp success;

  _QuSproutServer_getStateOfAllQubits_result__isset __isset;

  void __set_success(const  ::GetStateOfAllQubitsResp& val);

  bool operator == (const QuSproutServer_getStateOfAllQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getStateOfAllQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getStateOfAllQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getStateOfAllQubits_presult__isset {
  _QuSproutServer_getStateOfAllQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getStateOfAllQubits_presult__isset;

class QuSproutServer_getStateOfAllQubits_presult {
 public:


  virtual ~QuSproutServer_getStateOfAllQubits_presult() noexcept;
   ::GetStateOfAllQubitsResp* success;

  _QuSproutServer_getStateOfAllQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbabilities_args__isset {
  _QuSproutServer_getProbabilities_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbabilities_args__isset;

class QuSproutServer_getProbabilities_args {
 public:

  QuSproutServer_getProbabilities_args(const QuSproutServer_getProbabilities_args&);
  QuSproutServer_getProbabilities_args& operator=(const QuSproutServer_getProbabilities_args&);
  QuSproutServer_getProbabilities_args() noexcept {
  }

  virtual ~QuSproutServer_getProbabilities_args() noexcept;
   ::GetProbabilitiesReq req;

  _QuSproutServer_getProbabilities_args__isset __isset;

  void __set_req(const  ::GetProbabilitiesReq& val);

  bool operator == (const QuSproutServer_getProbabilities_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbabilities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbabilities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbabilities_pargs {
 public:


  virtual ~QuSproutServer_getProbabilities_pargs() noexcept;
  const  ::GetProbabilitiesReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbabilities_result__isset {
  _QuSproutServer_getProbabilities_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbabilities_result__isset;

class QuSproutServer_getProbabilities_result {
 public:

  QuSproutServer_getProbabilities_result(const QuSproutServer_getProbabilities_result&);
  QuSproutServer_getProbabilities_result& operator=(const QuSproutServer_getProbabilities_result&);
  QuSproutServer_getProbabilities_result() noexcept {
  }

  virtual ~QuSproutServer_getProbabilities_result() noexcept;
   ::GetProbabilitiesResp success;

  _QuSproutServer_getProbabilities_result__isset __isset;

  void __set_success(const  ::GetProbabilitiesResp& val);

  bool operator == (const QuSproutServer_getProbabilities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbabilities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbabilities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbabilities_presult__isset {
  _QuSproutServer_getProbabilities_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbabilities_presult__isset;

class QuSproutServer_getProbabilities_presult {
 public:


  virtual ~QuSproutServer_getProbabilities_presult() noexcept;
   ::GetProbabilitiesResp* success;

  _QuSproutServer_getProbabilities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getTaskInfo_args__isset {
  _QuSproutServer_getTaskInfo_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getTaskInfo_args__isset;

class QuSproutServer_getTaskInfo_args {
 public:

  QuSproutServer_getTaskInfo_args(const QuSproutServer_getTaskInfo_args&);
  QuSproutServer_getTaskInfo_args& operator=(const QuSproutServer_getTaskInfo_args&);
  QuSproutServer_getTaskInfo_args() noexcept {
  }

  virtual ~QuSproutServer_getTaskInfo_args() noexcept;
   ::GetTaskInfoReq req;

  _QuSproutServer_getTaskInfo_args__isset __isset;

  void __set_req(const  ::GetTaskInfoReq& val);

  bool operator == (const QuSproutServer_getTaskInfo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getTaskInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getTaskInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getTaskInfo_pargs {
 public:


  virtual ~QuSproutServer_getTaskInfo_pargs() noexcept;
  const  ::GetTaskInfoReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getTaskInfo_result__isset {
  _QuSproutServer_getTaskInfo_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getTaskInfo_result__isset;

class QuSproutServer_getTaskInfo_result {
 public:

  QuSproutServer_getTaskInfo_result(const QuSproutServer_getTaskInfo_result&);
  QuSproutServer_getTaskInfo_result& operator=(const QuSproutServer_getTaskInfo_result&);
  QuSproutServer_getTaskInfo_result() noexcept {
  }

  virtual ~QuSproutServer_getTaskInfo_result() noexcept;
   ::GetTaskInfoResp success;

  _QuSproutServer_getTaskInfo_result__isset __isset;

  void __set_success(const  ::GetTaskInfoResp& val);

  bool operator == (const QuSproutServer_getTaskInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getTaskInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getTaskInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getTaskInfo_presult__isset {
  _QuSproutServer_getTaskInfo_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getTaskInfo_presult__isset;

class QuSproutServer_getTaskInfo_presult {
 public:


  virtual ~QuSproutServer_getTaskInfo_presult() noexcept;
   ::GetTaskInfoResp* success;

  _QuSproutServer_getTaskInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getRandomCardInfo_args__isset {
  _QuSproutServer_getRandomCardInfo_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getRandomCardInfo_args__isset;

class QuSproutServer_getRandomCardInfo_args {
 public:

  QuSproutServer_getRandomCardInfo_args(const QuSproutServer_getRandomCardInfo_args&) noexcept;
  QuSproutServer_getRandomCardInfo_args& operator=(const QuSproutServer_getRandomCardInfo_args&) noexcept;
  QuSproutServer_getRandomCardInfo_args() noexcept {
  }

  virtual ~QuSproutServer_getRandomCardInfo_args() noexcept;
   ::GetRandomCardInfoReq req;

  _QuSproutServer_getRandomCardInfo_args__isset __isset;

  void __set_req(const  ::GetRandomCardInfoReq& val);

  bool operator == (const QuSproutServer_getRandomCardInfo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getRandomCardInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getRandomCardInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getRandomCardInfo_pargs {
 public:


  virtual ~QuSproutServer_getRandomCardInfo_pargs() noexcept;
  const  ::GetRandomCardInfoReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getRandomCardInfo_result__isset {
  _QuSproutServer_getRandomCardInfo_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getRandomCardInfo_result__isset;

class QuSproutServer_getRandomCardInfo_result {
 public:

  QuSproutServer_getRandomCardInfo_result(const QuSproutServer_getRandomCardInfo_result&);
  QuSproutServer_getRandomCardInfo_result& operator=(const QuSproutServer_getRandomCardInfo_result&);
  QuSproutServer_getRandomCardInfo_result() noexcept {
  }

  virtual ~QuSproutServer_getRandomCardInfo_result() noexcept;
   ::GetRandomCardInfoResp success;

  _QuSproutServer_getRandomCardInfo_result__isset __isset;

  void __set_success(const  ::GetRandomCardInfoResp& val);

  bool operator == (const QuSproutServer_getRandomCardInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getRandomCardInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getRandomCardInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getRandomCardInfo_presult__isset {
  _QuSproutServer_getRandomCardInfo_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getRandomCardInfo_presult__isset;

class QuSproutServer_getRandomCardInfo_presult {
 public:


  virtual ~QuSproutServer_getRandomCardInfo_presult() noexcept;
   ::GetRandomCardInfoResp* success;

  _QuSproutServer_getRandomCardInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_setRandomCard_args__isset {
  _QuSproutServer_setRandomCard_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_setRandomCard_args__isset;

class QuSproutServer_setRandomCard_args {
 public:

  QuSproutServer_setRandomCard_args(const QuSproutServer_setRandomCard_args&) noexcept;
  QuSproutServer_setRandomCard_args& operator=(const QuSproutServer_setRandomCard_args&) noexcept;
  QuSproutServer_setRandomCard_args() noexcept {
  }

  virtual ~QuSproutServer_setRandomCard_args() noexcept;
   ::SetRandomCardReq req;

  _QuSproutServer_setRandomCard_args__isset __isset;

  void __set_req(const  ::SetRandomCardReq& val);

  bool operator == (const QuSproutServer_setRandomCard_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_setRandomCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_setRandomCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_setRandomCard_pargs {
 public:


  virtual ~QuSproutServer_setRandomCard_pargs() noexcept;
  const  ::SetRandomCardReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_setRandomCard_result__isset {
  _QuSproutServer_setRandomCard_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_setRandomCard_result__isset;

class QuSproutServer_setRandomCard_result {
 public:

  QuSproutServer_setRandomCard_result(const QuSproutServer_setRandomCard_result&);
  QuSproutServer_setRandomCard_result& operator=(const QuSproutServer_setRandomCard_result&);
  QuSproutServer_setRandomCard_result() noexcept {
  }

  virtual ~QuSproutServer_setRandomCard_result() noexcept;
   ::SetRandomCardResp success;

  _QuSproutServer_setRandomCard_result__isset __isset;

  void __set_success(const  ::SetRandomCardResp& val);

  bool operator == (const QuSproutServer_setRandomCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_setRandomCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_setRandomCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_setRandomCard_presult__isset {
  _QuSproutServer_setRandomCard_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_setRandomCard_presult__isset;

class QuSproutServer_setRandomCard_presult {
 public:


  virtual ~QuSproutServer_setRandomCard_presult() noexcept;
   ::SetRandomCardResp* success;

  _QuSproutServer_setRandomCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getRandom_args__isset {
  _QuSproutServer_getRandom_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getRandom_args__isset;

class QuSproutServer_getRandom_args {
 public:

  QuSproutServer_getRandom_args(const QuSproutServer_getRandom_args&) noexcept;
  QuSproutServer_getRandom_args& operator=(const QuSproutServer_getRandom_args&) noexcept;
  QuSproutServer_getRandom_args() noexcept {
  }

  virtual ~QuSproutServer_getRandom_args() noexcept;
   ::GetRandomReq req;

  _QuSproutServer_getRandom_args__isset __isset;

  void __set_req(const  ::GetRandomReq& val);

  bool operator == (const QuSproutServer_getRandom_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getRandom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getRandom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getRandom_pargs {
 public:


  virtual ~QuSproutServer_getRandom_pargs() noexcept;
  const  ::GetRandomReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getRandom_result__isset {
  _QuSproutServer_getRandom_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getRandom_result__isset;

class QuSproutServer_getRandom_result {
 public:

  QuSproutServer_getRandom_result(const QuSproutServer_getRandom_result&);
  QuSproutServer_getRandom_result& operator=(const QuSproutServer_getRandom_result&);
  QuSproutServer_getRandom_result() noexcept {
  }

  virtual ~QuSproutServer_getRandom_result() noexcept;
   ::GetRandomResp success;

  _QuSproutServer_getRandom_result__isset __isset;

  void __set_success(const  ::GetRandomResp& val);

  bool operator == (const QuSproutServer_getRandom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getRandom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getRandom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getRandom_presult__isset {
  _QuSproutServer_getRandom_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getRandom_presult__isset;

class QuSproutServer_getRandom_presult {
 public:


  virtual ~QuSproutServer_getRandom_presult() noexcept;
   ::GetRandomResp* success;

  _QuSproutServer_getRandom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QuSproutServerClient : virtual public QuSproutServerIf {
 public:
  QuSproutServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QuSproutServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override;
  void send_initQubits(const  ::InitQubitsReq& req);
  void recv_initQubits( ::InitQubitsResp& _return);
  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override;
  void send_sendCircuitCmd(const  ::SendCircuitCmdReq& req);
  void recv_sendCircuitCmd( ::SendCircuitCmdResp& _return);
  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override;
  void send_cancelCmd(const  ::CancelCmdReq& req);
  void recv_cancelCmd( ::CancelCmdResp& _return);
  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override;
  void send_getProbAmp(const  ::GetProbAmpReq& req);
  void recv_getProbAmp( ::GetProbAmpResp& _return);
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override;
  void send_getProbOfAllOutcome(const  ::GetProbOfAllOutcomReq& req);
  void recv_getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return);
  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override;
  void send_getAllState(const  ::GetAllStateReq& req);
  void recv_getAllState( ::GetAllStateResp& _return);
  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override;
  void send_run(const  ::RunCircuitReq& req);
  void recv_run( ::RunCircuitResp& _return);
  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override;
  void send_getExpecPauliProd(const  ::GetExpecPauliProdReq& req);
  void recv_getExpecPauliProd( ::GetExpecPauliProdResp& _return);
  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override;
  void send_getExpecPauliSum(const  ::GetExpecPauliSumReq& req);
  void recv_getExpecPauliSum( ::GetExpecPauliSumResp& _return);
  void measureQubits( ::MeasureQubitsResp& _return, const  ::MeasureQubitsReq& req) override;
  void send_measureQubits(const  ::MeasureQubitsReq& req);
  void recv_measureQubits( ::MeasureQubitsResp& _return);
  void addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return, const  ::AddCustomGateByMatrixReq& req) override;
  void send_addCustomGateByMatrix(const  ::AddCustomGateByMatrixReq& req);
  void recv_addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return);
  void addSubCircuit( ::AddSubCircuitResp& _return, const  ::AddSubCircuitReq& req) override;
  void send_addSubCircuit(const  ::AddSubCircuitReq& req);
  void recv_addSubCircuit( ::AddSubCircuitResp& _return);
  void appendQubits( ::AppendQubitsResp& _return, const  ::AppendQubitsReq& req) override;
  void send_appendQubits(const  ::AppendQubitsReq& req);
  void recv_appendQubits( ::AppendQubitsResp& _return);
  void resetQubits( ::ResetQubitsResp& _return, const  ::ResetQubitsReq& req) override;
  void send_resetQubits(const  ::ResetQubitsReq& req);
  void recv_resetQubits( ::ResetQubitsResp& _return);
  void getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return, const  ::GetStateOfAllQubitsReq& req) override;
  void send_getStateOfAllQubits(const  ::GetStateOfAllQubitsReq& req);
  void recv_getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return);
  void getProbabilities( ::GetProbabilitiesResp& _return, const  ::GetProbabilitiesReq& req) override;
  void send_getProbabilities(const  ::GetProbabilitiesReq& req);
  void recv_getProbabilities( ::GetProbabilitiesResp& _return);
  void getTaskInfo( ::GetTaskInfoResp& _return, const  ::GetTaskInfoReq& req) override;
  void send_getTaskInfo(const  ::GetTaskInfoReq& req);
  void recv_getTaskInfo( ::GetTaskInfoResp& _return);
  void getRandomCardInfo( ::GetRandomCardInfoResp& _return, const  ::GetRandomCardInfoReq& req) override;
  void send_getRandomCardInfo(const  ::GetRandomCardInfoReq& req);
  void recv_getRandomCardInfo( ::GetRandomCardInfoResp& _return);
  void setRandomCard( ::SetRandomCardResp& _return, const  ::SetRandomCardReq& req) override;
  void send_setRandomCard(const  ::SetRandomCardReq& req);
  void recv_setRandomCard( ::SetRandomCardResp& _return);
  void getRandom( ::GetRandomResp& _return, const  ::GetRandomReq& req) override;
  void send_getRandom(const  ::GetRandomReq& req);
  void recv_getRandom( ::GetRandomResp& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuSproutServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<QuSproutServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (QuSproutServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCircuitCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbAmp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbOfAllOutcome(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExpecPauliProd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExpecPauliSum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_measureQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCustomGateByMatrix(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSubCircuit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_appendQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resetQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStateOfAllQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbabilities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTaskInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRandomCardInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setRandomCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRandom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuSproutServerProcessor(::std::shared_ptr<QuSproutServerIf> iface) :
    iface_(iface) {
    processMap_["initQubits"] = &QuSproutServerProcessor::process_initQubits;
    processMap_["sendCircuitCmd"] = &QuSproutServerProcessor::process_sendCircuitCmd;
    processMap_["cancelCmd"] = &QuSproutServerProcessor::process_cancelCmd;
    processMap_["getProbAmp"] = &QuSproutServerProcessor::process_getProbAmp;
    processMap_["getProbOfAllOutcome"] = &QuSproutServerProcessor::process_getProbOfAllOutcome;
    processMap_["getAllState"] = &QuSproutServerProcessor::process_getAllState;
    processMap_["run"] = &QuSproutServerProcessor::process_run;
    processMap_["getExpecPauliProd"] = &QuSproutServerProcessor::process_getExpecPauliProd;
    processMap_["getExpecPauliSum"] = &QuSproutServerProcessor::process_getExpecPauliSum;
    processMap_["measureQubits"] = &QuSproutServerProcessor::process_measureQubits;
    processMap_["addCustomGateByMatrix"] = &QuSproutServerProcessor::process_addCustomGateByMatrix;
    processMap_["addSubCircuit"] = &QuSproutServerProcessor::process_addSubCircuit;
    processMap_["appendQubits"] = &QuSproutServerProcessor::process_appendQubits;
    processMap_["resetQubits"] = &QuSproutServerProcessor::process_resetQubits;
    processMap_["getStateOfAllQubits"] = &QuSproutServerProcessor::process_getStateOfAllQubits;
    processMap_["getProbabilities"] = &QuSproutServerProcessor::process_getProbabilities;
    processMap_["getTaskInfo"] = &QuSproutServerProcessor::process_getTaskInfo;
    processMap_["getRandomCardInfo"] = &QuSproutServerProcessor::process_getRandomCardInfo;
    processMap_["setRandomCard"] = &QuSproutServerProcessor::process_setRandomCard;
    processMap_["getRandom"] = &QuSproutServerProcessor::process_getRandom;
  }

  virtual ~QuSproutServerProcessor() {}
};

class QuSproutServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuSproutServerProcessorFactory(const ::std::shared_ptr< QuSproutServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< QuSproutServerIfFactory > handlerFactory_;
};

class QuSproutServerMultiface : virtual public QuSproutServerIf {
 public:
  QuSproutServerMultiface(std::vector<std::shared_ptr<QuSproutServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuSproutServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<QuSproutServerIf> > ifaces_;
  QuSproutServerMultiface() {}
  void add(::std::shared_ptr<QuSproutServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initQubits(_return, req);
    }
    ifaces_[i]->initQubits(_return, req);
    return;
  }

  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCircuitCmd(_return, req);
    }
    ifaces_[i]->sendCircuitCmd(_return, req);
    return;
  }

  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelCmd(_return, req);
    }
    ifaces_[i]->cancelCmd(_return, req);
    return;
  }

  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbAmp(_return, req);
    }
    ifaces_[i]->getProbAmp(_return, req);
    return;
  }

  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbOfAllOutcome(_return, req);
    }
    ifaces_[i]->getProbOfAllOutcome(_return, req);
    return;
  }

  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllState(_return, req);
    }
    ifaces_[i]->getAllState(_return, req);
    return;
  }

  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run(_return, req);
    }
    ifaces_[i]->run(_return, req);
    return;
  }

  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExpecPauliProd(_return, req);
    }
    ifaces_[i]->getExpecPauliProd(_return, req);
    return;
  }

  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExpecPauliSum(_return, req);
    }
    ifaces_[i]->getExpecPauliSum(_return, req);
    return;
  }

  void measureQubits( ::MeasureQubitsResp& _return, const  ::MeasureQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->measureQubits(_return, req);
    }
    ifaces_[i]->measureQubits(_return, req);
    return;
  }

  void addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return, const  ::AddCustomGateByMatrixReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCustomGateByMatrix(_return, req);
    }
    ifaces_[i]->addCustomGateByMatrix(_return, req);
    return;
  }

  void addSubCircuit( ::AddSubCircuitResp& _return, const  ::AddSubCircuitReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSubCircuit(_return, req);
    }
    ifaces_[i]->addSubCircuit(_return, req);
    return;
  }

  void appendQubits( ::AppendQubitsResp& _return, const  ::AppendQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appendQubits(_return, req);
    }
    ifaces_[i]->appendQubits(_return, req);
    return;
  }

  void resetQubits( ::ResetQubitsResp& _return, const  ::ResetQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resetQubits(_return, req);
    }
    ifaces_[i]->resetQubits(_return, req);
    return;
  }

  void getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return, const  ::GetStateOfAllQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStateOfAllQubits(_return, req);
    }
    ifaces_[i]->getStateOfAllQubits(_return, req);
    return;
  }

  void getProbabilities( ::GetProbabilitiesResp& _return, const  ::GetProbabilitiesReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbabilities(_return, req);
    }
    ifaces_[i]->getProbabilities(_return, req);
    return;
  }

  void getTaskInfo( ::GetTaskInfoResp& _return, const  ::GetTaskInfoReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTaskInfo(_return, req);
    }
    ifaces_[i]->getTaskInfo(_return, req);
    return;
  }

  void getRandomCardInfo( ::GetRandomCardInfoResp& _return, const  ::GetRandomCardInfoReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRandomCardInfo(_return, req);
    }
    ifaces_[i]->getRandomCardInfo(_return, req);
    return;
  }

  void setRandomCard( ::SetRandomCardResp& _return, const  ::SetRandomCardReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setRandomCard(_return, req);
    }
    ifaces_[i]->setRandomCard(_return, req);
    return;
  }

  void getRandom( ::GetRandomResp& _return, const  ::GetRandomReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRandom(_return, req);
    }
    ifaces_[i]->getRandom(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QuSproutServerConcurrentClient : virtual public QuSproutServerIf {
 public:
  QuSproutServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  QuSproutServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override;
  int32_t send_initQubits(const  ::InitQubitsReq& req);
  void recv_initQubits( ::InitQubitsResp& _return, const int32_t seqid);
  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override;
  int32_t send_sendCircuitCmd(const  ::SendCircuitCmdReq& req);
  void recv_sendCircuitCmd( ::SendCircuitCmdResp& _return, const int32_t seqid);
  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override;
  int32_t send_cancelCmd(const  ::CancelCmdReq& req);
  void recv_cancelCmd( ::CancelCmdResp& _return, const int32_t seqid);
  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override;
  int32_t send_getProbAmp(const  ::GetProbAmpReq& req);
  void recv_getProbAmp( ::GetProbAmpResp& _return, const int32_t seqid);
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override;
  int32_t send_getProbOfAllOutcome(const  ::GetProbOfAllOutcomReq& req);
  void recv_getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const int32_t seqid);
  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override;
  int32_t send_getAllState(const  ::GetAllStateReq& req);
  void recv_getAllState( ::GetAllStateResp& _return, const int32_t seqid);
  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override;
  int32_t send_run(const  ::RunCircuitReq& req);
  void recv_run( ::RunCircuitResp& _return, const int32_t seqid);
  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override;
  int32_t send_getExpecPauliProd(const  ::GetExpecPauliProdReq& req);
  void recv_getExpecPauliProd( ::GetExpecPauliProdResp& _return, const int32_t seqid);
  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override;
  int32_t send_getExpecPauliSum(const  ::GetExpecPauliSumReq& req);
  void recv_getExpecPauliSum( ::GetExpecPauliSumResp& _return, const int32_t seqid);
  void measureQubits( ::MeasureQubitsResp& _return, const  ::MeasureQubitsReq& req) override;
  int32_t send_measureQubits(const  ::MeasureQubitsReq& req);
  void recv_measureQubits( ::MeasureQubitsResp& _return, const int32_t seqid);
  void addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return, const  ::AddCustomGateByMatrixReq& req) override;
  int32_t send_addCustomGateByMatrix(const  ::AddCustomGateByMatrixReq& req);
  void recv_addCustomGateByMatrix( ::AddCustomGateByMatrixResp& _return, const int32_t seqid);
  void addSubCircuit( ::AddSubCircuitResp& _return, const  ::AddSubCircuitReq& req) override;
  int32_t send_addSubCircuit(const  ::AddSubCircuitReq& req);
  void recv_addSubCircuit( ::AddSubCircuitResp& _return, const int32_t seqid);
  void appendQubits( ::AppendQubitsResp& _return, const  ::AppendQubitsReq& req) override;
  int32_t send_appendQubits(const  ::AppendQubitsReq& req);
  void recv_appendQubits( ::AppendQubitsResp& _return, const int32_t seqid);
  void resetQubits( ::ResetQubitsResp& _return, const  ::ResetQubitsReq& req) override;
  int32_t send_resetQubits(const  ::ResetQubitsReq& req);
  void recv_resetQubits( ::ResetQubitsResp& _return, const int32_t seqid);
  void getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return, const  ::GetStateOfAllQubitsReq& req) override;
  int32_t send_getStateOfAllQubits(const  ::GetStateOfAllQubitsReq& req);
  void recv_getStateOfAllQubits( ::GetStateOfAllQubitsResp& _return, const int32_t seqid);
  void getProbabilities( ::GetProbabilitiesResp& _return, const  ::GetProbabilitiesReq& req) override;
  int32_t send_getProbabilities(const  ::GetProbabilitiesReq& req);
  void recv_getProbabilities( ::GetProbabilitiesResp& _return, const int32_t seqid);
  void getTaskInfo( ::GetTaskInfoResp& _return, const  ::GetTaskInfoReq& req) override;
  int32_t send_getTaskInfo(const  ::GetTaskInfoReq& req);
  void recv_getTaskInfo( ::GetTaskInfoResp& _return, const int32_t seqid);
  void getRandomCardInfo( ::GetRandomCardInfoResp& _return, const  ::GetRandomCardInfoReq& req) override;
  int32_t send_getRandomCardInfo(const  ::GetRandomCardInfoReq& req);
  void recv_getRandomCardInfo( ::GetRandomCardInfoResp& _return, const int32_t seqid);
  void setRandomCard( ::SetRandomCardResp& _return, const  ::SetRandomCardReq& req) override;
  int32_t send_setRandomCard(const  ::SetRandomCardReq& req);
  void recv_setRandomCard( ::SetRandomCardResp& _return, const int32_t seqid);
  void getRandom( ::GetRandomResp& _return, const  ::GetRandomReq& req) override;
  int32_t send_getRandom(const  ::GetRandomReq& req);
  void recv_getRandom( ::GetRandomResp& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
