/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef qurootresource_TYPES_H
#define qurootresource_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "ecode_types.h"




struct GpuType {
  enum type {
    GpuType_Default = 0,
    GpuType_Nvidia = 1
  };
};

extern const std::map<int, const char*> _GpuType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GpuType::type& val);

std::string to_string(const GpuType::type& val);

class AddrDetail;

class MachineDetail;

class ResourceDetail;

class DeviceDetail;

class TcpResourceDetail;

class GateCapacity;

class DeviceCapacity;

class ResourceRegisterReq;

class ResourceRegisterResp;

class UnResourceRegisterReq;

class UnResourceRegisterResp;

class HeartReq;

class HeartResp;


class AddrDetail : public virtual ::apache::thrift::TBase {
 public:

  AddrDetail(const AddrDetail&);
  AddrDetail& operator=(const AddrDetail&);
  AddrDetail() noexcept
             : addr(),
               port(0) {
  }

  virtual ~AddrDetail() noexcept;
  std::string addr;
  int32_t port;

  void __set_addr(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const AddrDetail & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const AddrDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddrDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddrDetail &a, AddrDetail &b);

std::ostream& operator<<(std::ostream& out, const AddrDetail& obj);

typedef struct _MachineDetail__isset {
  _MachineDetail__isset() : sys_name(false), sys_release(false), sys_version(false), sys_machine(false) {}
  bool sys_name :1;
  bool sys_release :1;
  bool sys_version :1;
  bool sys_machine :1;
} _MachineDetail__isset;

class MachineDetail : public virtual ::apache::thrift::TBase {
 public:

  MachineDetail(const MachineDetail&);
  MachineDetail& operator=(const MachineDetail&);
  MachineDetail() noexcept
                : addr(),
                  sys_name(),
                  sys_release(),
                  sys_version(),
                  sys_machine() {
  }

  virtual ~MachineDetail() noexcept;
  std::string addr;
  std::string sys_name;
  std::string sys_release;
  std::string sys_version;
  std::string sys_machine;

  _MachineDetail__isset __isset;

  void __set_addr(const std::string& val);

  void __set_sys_name(const std::string& val);

  void __set_sys_release(const std::string& val);

  void __set_sys_version(const std::string& val);

  void __set_sys_machine(const std::string& val);

  bool operator == (const MachineDetail & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (__isset.sys_name != rhs.__isset.sys_name)
      return false;
    else if (__isset.sys_name && !(sys_name == rhs.sys_name))
      return false;
    if (__isset.sys_release != rhs.__isset.sys_release)
      return false;
    else if (__isset.sys_release && !(sys_release == rhs.sys_release))
      return false;
    if (__isset.sys_version != rhs.__isset.sys_version)
      return false;
    else if (__isset.sys_version && !(sys_version == rhs.sys_version))
      return false;
    if (__isset.sys_machine != rhs.__isset.sys_machine)
      return false;
    else if (__isset.sys_machine && !(sys_machine == rhs.sys_machine))
      return false;
    return true;
  }
  bool operator != (const MachineDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MachineDetail &a, MachineDetail &b);

std::ostream& operator<<(std::ostream& out, const MachineDetail& obj);

typedef struct _ResourceDetail__isset {
  _ResourceDetail__isset() : gpu_type(false), gpu_total_memory(false) {}
  bool gpu_type :1;
  bool gpu_total_memory :1;
} _ResourceDetail__isset;

class ResourceDetail : public virtual ::apache::thrift::TBase {
 public:

  ResourceDetail(const ResourceDetail&) noexcept;
  ResourceDetail& operator=(const ResourceDetail&) noexcept;
  ResourceDetail() noexcept
                 : cpu_total_memory(0),
                   cpu_free_memory(0),
                   gpu_type(static_cast<GpuType::type>(0)),
                   gpu_total_memory(0) {
  }

  virtual ~ResourceDetail() noexcept;
  int64_t cpu_total_memory;
  int64_t cpu_free_memory;
  /**
   * 
   * @see GpuType
   */
  GpuType::type gpu_type;
  int64_t gpu_total_memory;

  _ResourceDetail__isset __isset;

  void __set_cpu_total_memory(const int64_t val);

  void __set_cpu_free_memory(const int64_t val);

  void __set_gpu_type(const GpuType::type val);

  void __set_gpu_total_memory(const int64_t val);

  bool operator == (const ResourceDetail & rhs) const
  {
    if (!(cpu_total_memory == rhs.cpu_total_memory))
      return false;
    if (!(cpu_free_memory == rhs.cpu_free_memory))
      return false;
    if (__isset.gpu_type != rhs.__isset.gpu_type)
      return false;
    else if (__isset.gpu_type && !(gpu_type == rhs.gpu_type))
      return false;
    if (__isset.gpu_total_memory != rhs.__isset.gpu_total_memory)
      return false;
    else if (__isset.gpu_total_memory && !(gpu_total_memory == rhs.gpu_total_memory))
      return false;
    return true;
  }
  bool operator != (const ResourceDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResourceDetail &a, ResourceDetail &b);

std::ostream& operator<<(std::ostream& out, const ResourceDetail& obj);


class DeviceDetail : public virtual ::apache::thrift::TBase {
 public:

  DeviceDetail(const DeviceDetail&);
  DeviceDetail& operator=(const DeviceDetail&);
  DeviceDetail() noexcept {
  }

  virtual ~DeviceDetail() noexcept;
  MachineDetail machine;
  ResourceDetail resource;

  void __set_machine(const MachineDetail& val);

  void __set_resource(const ResourceDetail& val);

  bool operator == (const DeviceDetail & rhs) const
  {
    if (!(machine == rhs.machine))
      return false;
    if (!(resource == rhs.resource))
      return false;
    return true;
  }
  bool operator != (const DeviceDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceDetail &a, DeviceDetail &b);

std::ostream& operator<<(std::ostream& out, const DeviceDetail& obj);


class TcpResourceDetail : public virtual ::apache::thrift::TBase {
 public:

  TcpResourceDetail(const TcpResourceDetail&);
  TcpResourceDetail& operator=(const TcpResourceDetail&);
  TcpResourceDetail() noexcept {
  }

  virtual ~TcpResourceDetail() noexcept;
  AddrDetail addr_detail;
  std::map<std::string, DeviceDetail>  dev_list;

  void __set_addr_detail(const AddrDetail& val);

  void __set_dev_list(const std::map<std::string, DeviceDetail> & val);

  bool operator == (const TcpResourceDetail & rhs) const
  {
    if (!(addr_detail == rhs.addr_detail))
      return false;
    if (!(dev_list == rhs.dev_list))
      return false;
    return true;
  }
  bool operator != (const TcpResourceDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TcpResourceDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TcpResourceDetail &a, TcpResourceDetail &b);

std::ostream& operator<<(std::ostream& out, const TcpResourceDetail& obj);


class GateCapacity : public virtual ::apache::thrift::TBase {
 public:

  GateCapacity(const GateCapacity&);
  GateCapacity& operator=(const GateCapacity&);
  GateCapacity() noexcept
               : device() {
  }

  virtual ~GateCapacity() noexcept;
  std::string device;
  std::vector<std::string>  gates;

  void __set_device(const std::string& val);

  void __set_gates(const std::vector<std::string> & val);

  bool operator == (const GateCapacity & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    if (!(gates == rhs.gates))
      return false;
    return true;
  }
  bool operator != (const GateCapacity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateCapacity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GateCapacity &a, GateCapacity &b);

std::ostream& operator<<(std::ostream& out, const GateCapacity& obj);


class DeviceCapacity : public virtual ::apache::thrift::TBase {
 public:

  DeviceCapacity(const DeviceCapacity&);
  DeviceCapacity& operator=(const DeviceCapacity&);
  DeviceCapacity() noexcept {
  }

  virtual ~DeviceCapacity() noexcept;
  std::vector<GateCapacity>  gate_cap_list;

  void __set_gate_cap_list(const std::vector<GateCapacity> & val);

  bool operator == (const DeviceCapacity & rhs) const
  {
    if (!(gate_cap_list == rhs.gate_cap_list))
      return false;
    return true;
  }
  bool operator != (const DeviceCapacity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceCapacity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceCapacity &a, DeviceCapacity &b);

std::ostream& operator<<(std::ostream& out, const DeviceCapacity& obj);


class ResourceRegisterReq : public virtual ::apache::thrift::TBase {
 public:

  ResourceRegisterReq(const ResourceRegisterReq&);
  ResourceRegisterReq& operator=(const ResourceRegisterReq&);
  ResourceRegisterReq() noexcept
                      : resource_id(),
                        name(),
                        protocol(0) {
  }

  virtual ~ResourceRegisterReq() noexcept;
  std::string resource_id;
  std::string name;
  int32_t protocol;
  TcpResourceDetail tcp_resource;
  DeviceCapacity cap;

  void __set_resource_id(const std::string& val);

  void __set_name(const std::string& val);

  void __set_protocol(const int32_t val);

  void __set_tcp_resource(const TcpResourceDetail& val);

  void __set_cap(const DeviceCapacity& val);

  bool operator == (const ResourceRegisterReq & rhs) const
  {
    if (!(resource_id == rhs.resource_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(tcp_resource == rhs.tcp_resource))
      return false;
    if (!(cap == rhs.cap))
      return false;
    return true;
  }
  bool operator != (const ResourceRegisterReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceRegisterReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResourceRegisterReq &a, ResourceRegisterReq &b);

std::ostream& operator<<(std::ostream& out, const ResourceRegisterReq& obj);


class ResourceRegisterResp : public virtual ::apache::thrift::TBase {
 public:

  ResourceRegisterResp(const ResourceRegisterResp&);
  ResourceRegisterResp& operator=(const ResourceRegisterResp&);
  ResourceRegisterResp() noexcept {
  }

  virtual ~ResourceRegisterResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const ResourceRegisterResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const ResourceRegisterResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceRegisterResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResourceRegisterResp &a, ResourceRegisterResp &b);

std::ostream& operator<<(std::ostream& out, const ResourceRegisterResp& obj);


class UnResourceRegisterReq : public virtual ::apache::thrift::TBase {
 public:

  UnResourceRegisterReq(const UnResourceRegisterReq&);
  UnResourceRegisterReq& operator=(const UnResourceRegisterReq&);
  UnResourceRegisterReq() noexcept
                        : resource_id() {
  }

  virtual ~UnResourceRegisterReq() noexcept;
  std::string resource_id;

  void __set_resource_id(const std::string& val);

  bool operator == (const UnResourceRegisterReq & rhs) const
  {
    if (!(resource_id == rhs.resource_id))
      return false;
    return true;
  }
  bool operator != (const UnResourceRegisterReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnResourceRegisterReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnResourceRegisterReq &a, UnResourceRegisterReq &b);

std::ostream& operator<<(std::ostream& out, const UnResourceRegisterReq& obj);


class UnResourceRegisterResp : public virtual ::apache::thrift::TBase {
 public:

  UnResourceRegisterResp(const UnResourceRegisterResp&);
  UnResourceRegisterResp& operator=(const UnResourceRegisterResp&);
  UnResourceRegisterResp() noexcept {
  }

  virtual ~UnResourceRegisterResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const UnResourceRegisterResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const UnResourceRegisterResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnResourceRegisterResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnResourceRegisterResp &a, UnResourceRegisterResp &b);

std::ostream& operator<<(std::ostream& out, const UnResourceRegisterResp& obj);

typedef struct _HeartReq__isset {
  _HeartReq__isset() : dev_list(false) {}
  bool dev_list :1;
} _HeartReq__isset;

class HeartReq : public virtual ::apache::thrift::TBase {
 public:

  HeartReq(const HeartReq&);
  HeartReq& operator=(const HeartReq&);
  HeartReq() noexcept
           : resource_id(),
             up_resource(0) {
  }

  virtual ~HeartReq() noexcept;
  std::string resource_id;
  bool up_resource;
  std::map<std::string, DeviceDetail>  dev_list;

  _HeartReq__isset __isset;

  void __set_resource_id(const std::string& val);

  void __set_up_resource(const bool val);

  void __set_dev_list(const std::map<std::string, DeviceDetail> & val);

  bool operator == (const HeartReq & rhs) const
  {
    if (!(resource_id == rhs.resource_id))
      return false;
    if (!(up_resource == rhs.up_resource))
      return false;
    if (__isset.dev_list != rhs.__isset.dev_list)
      return false;
    else if (__isset.dev_list && !(dev_list == rhs.dev_list))
      return false;
    return true;
  }
  bool operator != (const HeartReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartReq &a, HeartReq &b);

std::ostream& operator<<(std::ostream& out, const HeartReq& obj);


class HeartResp : public virtual ::apache::thrift::TBase {
 public:

  HeartResp(const HeartResp&);
  HeartResp& operator=(const HeartResp&);
  HeartResp() noexcept {
  }

  virtual ~HeartResp() noexcept;
   ::BaseCode base;

  void __set_base(const  ::BaseCode& val);

  bool operator == (const HeartResp & rhs) const
  {
    if (!(base == rhs.base))
      return false;
    return true;
  }
  bool operator != (const HeartResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartResp &a, HeartResp &b);

std::ostream& operator<<(std::ostream& out, const HeartResp& obj);



#endif
