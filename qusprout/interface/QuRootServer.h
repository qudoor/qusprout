/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QuRootServer_H
#define QuRootServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "qurootresource_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QuRootServerIf {
 public:
  virtual ~QuRootServerIf() {}
  virtual void resourceRegister(ResourceRegisterResp& _return, const ResourceRegisterReq& req) = 0;
  virtual void unResourceRegister(UnResourceRegisterResp& _return, const UnResourceRegisterReq& req) = 0;
  virtual void heart(HeartResp& _return, const HeartReq& req) = 0;
};

class QuRootServerIfFactory {
 public:
  typedef QuRootServerIf Handler;

  virtual ~QuRootServerIfFactory() {}

  virtual QuRootServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuRootServerIf* /* handler */) = 0;
  };

class QuRootServerIfSingletonFactory : virtual public QuRootServerIfFactory {
 public:
  QuRootServerIfSingletonFactory(const ::std::shared_ptr<QuRootServerIf>& iface) : iface_(iface) {}
  virtual ~QuRootServerIfSingletonFactory() {}

  virtual QuRootServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(QuRootServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<QuRootServerIf> iface_;
};

class QuRootServerNull : virtual public QuRootServerIf {
 public:
  virtual ~QuRootServerNull() {}
  void resourceRegister(ResourceRegisterResp& /* _return */, const ResourceRegisterReq& /* req */) override {
    return;
  }
  void unResourceRegister(UnResourceRegisterResp& /* _return */, const UnResourceRegisterReq& /* req */) override {
    return;
  }
  void heart(HeartResp& /* _return */, const HeartReq& /* req */) override {
    return;
  }
};

typedef struct _QuRootServer_resourceRegister_args__isset {
  _QuRootServer_resourceRegister_args__isset() : req(false) {}
  bool req :1;
} _QuRootServer_resourceRegister_args__isset;

class QuRootServer_resourceRegister_args {
 public:

  QuRootServer_resourceRegister_args(const QuRootServer_resourceRegister_args&);
  QuRootServer_resourceRegister_args& operator=(const QuRootServer_resourceRegister_args&);
  QuRootServer_resourceRegister_args() noexcept {
  }

  virtual ~QuRootServer_resourceRegister_args() noexcept;
  ResourceRegisterReq req;

  _QuRootServer_resourceRegister_args__isset __isset;

  void __set_req(const ResourceRegisterReq& val);

  bool operator == (const QuRootServer_resourceRegister_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_resourceRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_resourceRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuRootServer_resourceRegister_pargs {
 public:


  virtual ~QuRootServer_resourceRegister_pargs() noexcept;
  const ResourceRegisterReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_resourceRegister_result__isset {
  _QuRootServer_resourceRegister_result__isset() : success(false) {}
  bool success :1;
} _QuRootServer_resourceRegister_result__isset;

class QuRootServer_resourceRegister_result {
 public:

  QuRootServer_resourceRegister_result(const QuRootServer_resourceRegister_result&);
  QuRootServer_resourceRegister_result& operator=(const QuRootServer_resourceRegister_result&);
  QuRootServer_resourceRegister_result() noexcept {
  }

  virtual ~QuRootServer_resourceRegister_result() noexcept;
  ResourceRegisterResp success;

  _QuRootServer_resourceRegister_result__isset __isset;

  void __set_success(const ResourceRegisterResp& val);

  bool operator == (const QuRootServer_resourceRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_resourceRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_resourceRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_resourceRegister_presult__isset {
  _QuRootServer_resourceRegister_presult__isset() : success(false) {}
  bool success :1;
} _QuRootServer_resourceRegister_presult__isset;

class QuRootServer_resourceRegister_presult {
 public:


  virtual ~QuRootServer_resourceRegister_presult() noexcept;
  ResourceRegisterResp* success;

  _QuRootServer_resourceRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuRootServer_unResourceRegister_args__isset {
  _QuRootServer_unResourceRegister_args__isset() : req(false) {}
  bool req :1;
} _QuRootServer_unResourceRegister_args__isset;

class QuRootServer_unResourceRegister_args {
 public:

  QuRootServer_unResourceRegister_args(const QuRootServer_unResourceRegister_args&);
  QuRootServer_unResourceRegister_args& operator=(const QuRootServer_unResourceRegister_args&);
  QuRootServer_unResourceRegister_args() noexcept {
  }

  virtual ~QuRootServer_unResourceRegister_args() noexcept;
  UnResourceRegisterReq req;

  _QuRootServer_unResourceRegister_args__isset __isset;

  void __set_req(const UnResourceRegisterReq& val);

  bool operator == (const QuRootServer_unResourceRegister_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_unResourceRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_unResourceRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuRootServer_unResourceRegister_pargs {
 public:


  virtual ~QuRootServer_unResourceRegister_pargs() noexcept;
  const UnResourceRegisterReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_unResourceRegister_result__isset {
  _QuRootServer_unResourceRegister_result__isset() : success(false) {}
  bool success :1;
} _QuRootServer_unResourceRegister_result__isset;

class QuRootServer_unResourceRegister_result {
 public:

  QuRootServer_unResourceRegister_result(const QuRootServer_unResourceRegister_result&);
  QuRootServer_unResourceRegister_result& operator=(const QuRootServer_unResourceRegister_result&);
  QuRootServer_unResourceRegister_result() noexcept {
  }

  virtual ~QuRootServer_unResourceRegister_result() noexcept;
  UnResourceRegisterResp success;

  _QuRootServer_unResourceRegister_result__isset __isset;

  void __set_success(const UnResourceRegisterResp& val);

  bool operator == (const QuRootServer_unResourceRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_unResourceRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_unResourceRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_unResourceRegister_presult__isset {
  _QuRootServer_unResourceRegister_presult__isset() : success(false) {}
  bool success :1;
} _QuRootServer_unResourceRegister_presult__isset;

class QuRootServer_unResourceRegister_presult {
 public:


  virtual ~QuRootServer_unResourceRegister_presult() noexcept;
  UnResourceRegisterResp* success;

  _QuRootServer_unResourceRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuRootServer_heart_args__isset {
  _QuRootServer_heart_args__isset() : req(false) {}
  bool req :1;
} _QuRootServer_heart_args__isset;

class QuRootServer_heart_args {
 public:

  QuRootServer_heart_args(const QuRootServer_heart_args&);
  QuRootServer_heart_args& operator=(const QuRootServer_heart_args&);
  QuRootServer_heart_args() noexcept {
  }

  virtual ~QuRootServer_heart_args() noexcept;
  HeartReq req;

  _QuRootServer_heart_args__isset __isset;

  void __set_req(const HeartReq& val);

  bool operator == (const QuRootServer_heart_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_heart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_heart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuRootServer_heart_pargs {
 public:


  virtual ~QuRootServer_heart_pargs() noexcept;
  const HeartReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_heart_result__isset {
  _QuRootServer_heart_result__isset() : success(false) {}
  bool success :1;
} _QuRootServer_heart_result__isset;

class QuRootServer_heart_result {
 public:

  QuRootServer_heart_result(const QuRootServer_heart_result&);
  QuRootServer_heart_result& operator=(const QuRootServer_heart_result&);
  QuRootServer_heart_result() noexcept {
  }

  virtual ~QuRootServer_heart_result() noexcept;
  HeartResp success;

  _QuRootServer_heart_result__isset __isset;

  void __set_success(const HeartResp& val);

  bool operator == (const QuRootServer_heart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuRootServer_heart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuRootServer_heart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuRootServer_heart_presult__isset {
  _QuRootServer_heart_presult__isset() : success(false) {}
  bool success :1;
} _QuRootServer_heart_presult__isset;

class QuRootServer_heart_presult {
 public:


  virtual ~QuRootServer_heart_presult() noexcept;
  HeartResp* success;

  _QuRootServer_heart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QuRootServerClient : virtual public QuRootServerIf {
 public:
  QuRootServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QuRootServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void resourceRegister(ResourceRegisterResp& _return, const ResourceRegisterReq& req) override;
  void send_resourceRegister(const ResourceRegisterReq& req);
  void recv_resourceRegister(ResourceRegisterResp& _return);
  void unResourceRegister(UnResourceRegisterResp& _return, const UnResourceRegisterReq& req) override;
  void send_unResourceRegister(const UnResourceRegisterReq& req);
  void recv_unResourceRegister(UnResourceRegisterResp& _return);
  void heart(HeartResp& _return, const HeartReq& req) override;
  void send_heart(const HeartReq& req);
  void recv_heart(HeartResp& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuRootServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<QuRootServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (QuRootServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_resourceRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unResourceRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuRootServerProcessor(::std::shared_ptr<QuRootServerIf> iface) :
    iface_(iface) {
    processMap_["resourceRegister"] = &QuRootServerProcessor::process_resourceRegister;
    processMap_["unResourceRegister"] = &QuRootServerProcessor::process_unResourceRegister;
    processMap_["heart"] = &QuRootServerProcessor::process_heart;
  }

  virtual ~QuRootServerProcessor() {}
};

class QuRootServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuRootServerProcessorFactory(const ::std::shared_ptr< QuRootServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< QuRootServerIfFactory > handlerFactory_;
};

class QuRootServerMultiface : virtual public QuRootServerIf {
 public:
  QuRootServerMultiface(std::vector<std::shared_ptr<QuRootServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuRootServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<QuRootServerIf> > ifaces_;
  QuRootServerMultiface() {}
  void add(::std::shared_ptr<QuRootServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void resourceRegister(ResourceRegisterResp& _return, const ResourceRegisterReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resourceRegister(_return, req);
    }
    ifaces_[i]->resourceRegister(_return, req);
    return;
  }

  void unResourceRegister(UnResourceRegisterResp& _return, const UnResourceRegisterReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unResourceRegister(_return, req);
    }
    ifaces_[i]->unResourceRegister(_return, req);
    return;
  }

  void heart(HeartResp& _return, const HeartReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heart(_return, req);
    }
    ifaces_[i]->heart(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QuRootServerConcurrentClient : virtual public QuRootServerIf {
 public:
  QuRootServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  QuRootServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void resourceRegister(ResourceRegisterResp& _return, const ResourceRegisterReq& req) override;
  int32_t send_resourceRegister(const ResourceRegisterReq& req);
  void recv_resourceRegister(ResourceRegisterResp& _return, const int32_t seqid);
  void unResourceRegister(UnResourceRegisterResp& _return, const UnResourceRegisterReq& req) override;
  int32_t send_unResourceRegister(const UnResourceRegisterReq& req);
  void recv_unResourceRegister(UnResourceRegisterResp& _return, const int32_t seqid);
  void heart(HeartResp& _return, const HeartReq& req) override;
  int32_t send_heart(const HeartReq& req);
  void recv_heart(HeartResp& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
