#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=qusprout.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import qusprout.code.ttypes
import qusprout.statistics.ttypes

from thrift.transport import TTransport
all_structs = []


class RegType(object):
    RegType_Cpu_Simulator = 0
    RegType_Gpu_Simulator = 1

    _VALUES_TO_NAMES = {
        0: "RegType_Cpu_Simulator",
        1: "RegType_Gpu_Simulator",
    }

    _NAMES_TO_VALUES = {
        "RegType_Cpu_Simulator": 0,
        "RegType_Gpu_Simulator": 1,
    }


class ResourceInfo(object):
    """
    Attributes:
     - total_cpu
     - free_cpu
     - total_memory
     - free_memory
     - create_time

    """


    def __init__(self, total_cpu=None, free_cpu=None, total_memory=None, free_memory=None, create_time=None,):
        self.total_cpu = total_cpu
        self.free_cpu = free_cpu
        self.total_memory = total_memory
        self.free_memory = free_memory
        self.create_time = create_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.total_cpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.free_cpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.total_memory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.free_memory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.create_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResourceInfo')
        if self.total_cpu is not None:
            oprot.writeFieldBegin('total_cpu', TType.I64, 1)
            oprot.writeI64(self.total_cpu)
            oprot.writeFieldEnd()
        if self.free_cpu is not None:
            oprot.writeFieldBegin('free_cpu', TType.I64, 2)
            oprot.writeI64(self.free_cpu)
            oprot.writeFieldEnd()
        if self.total_memory is not None:
            oprot.writeFieldBegin('total_memory', TType.I64, 3)
            oprot.writeI64(self.total_memory)
            oprot.writeFieldEnd()
        if self.free_memory is not None:
            oprot.writeFieldBegin('free_memory', TType.I64, 4)
            oprot.writeI64(self.free_memory)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.I64, 5)
            oprot.writeI64(self.create_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.total_cpu is None:
            raise TProtocolException(message='Required field total_cpu is unset!')
        if self.free_cpu is None:
            raise TProtocolException(message='Required field free_cpu is unset!')
        if self.total_memory is None:
            raise TProtocolException(message='Required field total_memory is unset!')
        if self.free_memory is None:
            raise TProtocolException(message='Required field free_memory is unset!')
        if self.create_time is None:
            raise TProtocolException(message='Required field create_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MachineInfo(object):
    """
    Attributes:
     - addr
     - sys_name
     - sys_release
     - sys_version
     - sys_machine
     - create_time

    """


    def __init__(self, addr=None, sys_name=None, sys_release=None, sys_version=None, sys_machine=None, create_time=None,):
        self.addr = addr
        self.sys_name = sys_name
        self.sys_release = sys_release
        self.sys_version = sys_version
        self.sys_machine = sys_machine
        self.create_time = create_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sys_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sys_release = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sys_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sys_machine = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.create_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MachineInfo')
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 1)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.sys_name is not None:
            oprot.writeFieldBegin('sys_name', TType.STRING, 2)
            oprot.writeString(self.sys_name.encode('utf-8') if sys.version_info[0] == 2 else self.sys_name)
            oprot.writeFieldEnd()
        if self.sys_release is not None:
            oprot.writeFieldBegin('sys_release', TType.STRING, 3)
            oprot.writeString(self.sys_release.encode('utf-8') if sys.version_info[0] == 2 else self.sys_release)
            oprot.writeFieldEnd()
        if self.sys_version is not None:
            oprot.writeFieldBegin('sys_version', TType.STRING, 4)
            oprot.writeString(self.sys_version.encode('utf-8') if sys.version_info[0] == 2 else self.sys_version)
            oprot.writeFieldEnd()
        if self.sys_machine is not None:
            oprot.writeFieldBegin('sys_machine', TType.STRING, 5)
            oprot.writeString(self.sys_machine.encode('utf-8') if sys.version_info[0] == 2 else self.sys_machine)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.I64, 6)
            oprot.writeI64(self.create_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.addr is None:
            raise TProtocolException(message='Required field addr is unset!')
        if self.create_time is None:
            raise TProtocolException(message='Required field create_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RpcConnectInfo(object):
    """
    Attributes:
     - addr
     - port

    """


    def __init__(self, addr=None, port=None,):
        self.addr = addr
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RpcConnectInfo')
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 1)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.addr is None:
            raise TProtocolException(message='Required field addr is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RegisterReq(object):
    """
    Attributes:
     - type
     - seq
     - machine
     - rpc
     - resource

    """


    def __init__(self, type=None, seq=None, machine=None, rpc=None, resource=None,):
        self.type = type
        self.seq = seq
        self.machine = machine
        self.rpc = rpc
        self.resource = resource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.machine = MachineInfo()
                    self.machine.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.rpc = RpcConnectInfo()
                    self.rpc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.resource = ResourceInfo()
                    self.resource.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterReq')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 2)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        if self.machine is not None:
            oprot.writeFieldBegin('machine', TType.STRUCT, 3)
            self.machine.write(oprot)
            oprot.writeFieldEnd()
        if self.rpc is not None:
            oprot.writeFieldBegin('rpc', TType.STRUCT, 4)
            self.rpc.write(oprot)
            oprot.writeFieldEnd()
        if self.resource is not None:
            oprot.writeFieldBegin('resource', TType.STRUCT, 5)
            self.resource.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        if self.machine is None:
            raise TProtocolException(message='Required field machine is unset!')
        if self.rpc is None:
            raise TProtocolException(message='Required field rpc is unset!')
        if self.resource is None:
            raise TProtocolException(message='Required field resource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RegisterResp(object):
    """
    Attributes:
     - base

    """


    def __init__(self, base=None,):
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnRegisterReq(object):
    """
    Attributes:
     - type
     - seq
     - machine

    """


    def __init__(self, type=None, seq=None, machine=None,):
        self.type = type
        self.seq = seq
        self.machine = machine

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.machine = MachineInfo()
                    self.machine.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnRegisterReq')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 2)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        if self.machine is not None:
            oprot.writeFieldBegin('machine', TType.STRUCT, 3)
            self.machine.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        if self.machine is None:
            raise TProtocolException(message='Required field machine is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnRegisterResp(object):
    """
    Attributes:
     - base

    """


    def __init__(self, base=None,):
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnRegisterResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeartbeatReq(object):
    """
    Attributes:
     - type
     - seq
     - machine

    """


    def __init__(self, type=None, seq=None, machine=None,):
        self.type = type
        self.seq = seq
        self.machine = machine

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.machine = MachineInfo()
                    self.machine.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeartbeatReq')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 2)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        if self.machine is not None:
            oprot.writeFieldBegin('machine', TType.STRUCT, 3)
            self.machine.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        if self.machine is None:
            raise TProtocolException(message='Required field machine is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeartbeatResp(object):
    """
    Attributes:
     - base

    """


    def __init__(self, base=None,):
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeartbeatResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportResourceReq(object):
    """
    Attributes:
     - type
     - seq
     - machine
     - resource

    """


    def __init__(self, type=None, seq=None, machine=None, resource=None,):
        self.type = type
        self.seq = seq
        self.machine = machine
        self.resource = resource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.machine = MachineInfo()
                    self.machine.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.resource = ResourceInfo()
                    self.resource.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportResourceReq')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 2)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        if self.machine is not None:
            oprot.writeFieldBegin('machine', TType.STRUCT, 3)
            self.machine.write(oprot)
            oprot.writeFieldEnd()
        if self.resource is not None:
            oprot.writeFieldBegin('resource', TType.STRUCT, 4)
            self.resource.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        if self.machine is None:
            raise TProtocolException(message='Required field machine is unset!')
        if self.resource is None:
            raise TProtocolException(message='Required field resource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportResourceResp(object):
    """
    Attributes:
     - base

    """


    def __init__(self, base=None,):
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportResourceResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportStatisticsInfoReq(object):
    """
    Attributes:
     - seq
     - machine
     - sis

    """


    def __init__(self, seq=None, machine=None, sis=None,):
        self.seq = seq
        self.machine = machine
        self.sis = sis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.machine = MachineInfo()
                    self.machine.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sis = qusprout.statistics.ttypes.StatisticsInfo()
                    self.sis.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportStatisticsInfoReq')
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 1)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        if self.machine is not None:
            oprot.writeFieldBegin('machine', TType.STRUCT, 2)
            self.machine.write(oprot)
            oprot.writeFieldEnd()
        if self.sis is not None:
            oprot.writeFieldBegin('sis', TType.STRUCT, 3)
            self.sis.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        if self.machine is None:
            raise TProtocolException(message='Required field machine is unset!')
        if self.sis is None:
            raise TProtocolException(message='Required field sis is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportStatisticsInfoResp(object):
    """
    Attributes:
     - base

    """


    def __init__(self, base=None,):
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportStatisticsInfoResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetStatisticsInfoReq(object):
    """
    Attributes:
     - seq

    """


    def __init__(self, seq=None,):
        self.seq = seq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.seq = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetStatisticsInfoReq')
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.STRING, 1)
            oprot.writeString(self.seq.encode('utf-8') if sys.version_info[0] == 2 else self.seq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.seq is None:
            raise TProtocolException(message='Required field seq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetStatisticsInfoResp(object):
    """
    Attributes:
     - base
     - sis_list

    """


    def __init__(self, base=None, sis_list=None,):
        self.base = base
        self.sis_list = sis_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.base = qusprout.code.ttypes.BaseCode()
                    self.base.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.sis_list = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = qusprout.statistics.ttypes.StatisticsInfo()
                        _val6.read(iprot)
                        self.sis_list[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetStatisticsInfoResp')
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRUCT, 1)
            self.base.write(oprot)
            oprot.writeFieldEnd()
        if self.sis_list is not None:
            oprot.writeFieldBegin('sis_list', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sis_list))
            for kiter7, viter8 in self.sis_list.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        if self.sis_list is None:
            raise TProtocolException(message='Required field sis_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ResourceInfo)
ResourceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'total_cpu', None, None, ),  # 1
    (2, TType.I64, 'free_cpu', None, None, ),  # 2
    (3, TType.I64, 'total_memory', None, None, ),  # 3
    (4, TType.I64, 'free_memory', None, None, ),  # 4
    (5, TType.I64, 'create_time', None, None, ),  # 5
)
all_structs.append(MachineInfo)
MachineInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'addr', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sys_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sys_release', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sys_version', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sys_machine', 'UTF8', None, ),  # 5
    (6, TType.I64, 'create_time', None, None, ),  # 6
)
all_structs.append(RpcConnectInfo)
RpcConnectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'addr', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
)
all_structs.append(RegisterReq)
RegisterReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'seq', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'machine', [MachineInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'rpc', [RpcConnectInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'resource', [ResourceInfo, None], None, ),  # 5
)
all_structs.append(RegisterResp)
RegisterResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
)
all_structs.append(UnRegisterReq)
UnRegisterReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'seq', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'machine', [MachineInfo, None], None, ),  # 3
)
all_structs.append(UnRegisterResp)
UnRegisterResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
)
all_structs.append(HeartbeatReq)
HeartbeatReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'seq', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'machine', [MachineInfo, None], None, ),  # 3
)
all_structs.append(HeartbeatResp)
HeartbeatResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
)
all_structs.append(ReportResourceReq)
ReportResourceReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'seq', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'machine', [MachineInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'resource', [ResourceInfo, None], None, ),  # 4
)
all_structs.append(ReportResourceResp)
ReportResourceResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
)
all_structs.append(ReportStatisticsInfoReq)
ReportStatisticsInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'seq', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'machine', [MachineInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'sis', [qusprout.statistics.ttypes.StatisticsInfo, None], None, ),  # 3
)
all_structs.append(ReportStatisticsInfoResp)
ReportStatisticsInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
)
all_structs.append(GetStatisticsInfoReq)
GetStatisticsInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'seq', 'UTF8', None, ),  # 1
)
all_structs.append(GetStatisticsInfoResp)
GetStatisticsInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'base', [qusprout.code.ttypes.BaseCode, None], None, ),  # 1
    (2, TType.MAP, 'sis_list', (TType.STRING, 'UTF8', TType.STRUCT, [qusprout.statistics.ttypes.StatisticsInfo, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
