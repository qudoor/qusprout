/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QuSproutServer_H
#define QuSproutServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "qusprout_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QuSproutServerIf {
 public:
  virtual ~QuSproutServerIf() {}
  virtual void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) = 0;
  virtual void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) = 0;
  virtual void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) = 0;
  virtual void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) = 0;
  virtual void getProbOfOutcome( ::GetProbOfOutcomeResp& _return, const  ::GetProbOfOutcomeReq& req) = 0;
  virtual void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) = 0;
  virtual void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) = 0;
  virtual void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) = 0;
  virtual void applyQFT( ::ApplyQFTResp& _return, const  ::ApplyQFTReq& req) = 0;
  virtual void applyFullQFT( ::ApplyFullQFTResp& _return, const  ::ApplyFullQFTReq& req) = 0;
  virtual void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) = 0;
  virtual void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) = 0;
};

class QuSproutServerIfFactory {
 public:
  typedef QuSproutServerIf Handler;

  virtual ~QuSproutServerIfFactory() {}

  virtual QuSproutServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuSproutServerIf* /* handler */) = 0;
  };

class QuSproutServerIfSingletonFactory : virtual public QuSproutServerIfFactory {
 public:
  QuSproutServerIfSingletonFactory(const ::std::shared_ptr<QuSproutServerIf>& iface) : iface_(iface) {}
  virtual ~QuSproutServerIfSingletonFactory() {}

  virtual QuSproutServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(QuSproutServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<QuSproutServerIf> iface_;
};

class QuSproutServerNull : virtual public QuSproutServerIf {
 public:
  virtual ~QuSproutServerNull() {}
  void initQubits( ::InitQubitsResp& /* _return */, const  ::InitQubitsReq& /* req */) override {
    return;
  }
  void sendCircuitCmd( ::SendCircuitCmdResp& /* _return */, const  ::SendCircuitCmdReq& /* req */) override {
    return;
  }
  void cancelCmd( ::CancelCmdResp& /* _return */, const  ::CancelCmdReq& /* req */) override {
    return;
  }
  void getProbAmp( ::GetProbAmpResp& /* _return */, const  ::GetProbAmpReq& /* req */) override {
    return;
  }
  void getProbOfOutcome( ::GetProbOfOutcomeResp& /* _return */, const  ::GetProbOfOutcomeReq& /* req */) override {
    return;
  }
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& /* _return */, const  ::GetProbOfAllOutcomReq& /* req */) override {
    return;
  }
  void getAllState( ::GetAllStateResp& /* _return */, const  ::GetAllStateReq& /* req */) override {
    return;
  }
  void run( ::RunCircuitResp& /* _return */, const  ::RunCircuitReq& /* req */) override {
    return;
  }
  void applyQFT( ::ApplyQFTResp& /* _return */, const  ::ApplyQFTReq& /* req */) override {
    return;
  }
  void applyFullQFT( ::ApplyFullQFTResp& /* _return */, const  ::ApplyFullQFTReq& /* req */) override {
    return;
  }
  void getExpecPauliProd( ::GetExpecPauliProdResp& /* _return */, const  ::GetExpecPauliProdReq& /* req */) override {
    return;
  }
  void getExpecPauliSum( ::GetExpecPauliSumResp& /* _return */, const  ::GetExpecPauliSumReq& /* req */) override {
    return;
  }
};

typedef struct _QuSproutServer_initQubits_args__isset {
  _QuSproutServer_initQubits_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_initQubits_args__isset;

class QuSproutServer_initQubits_args {
 public:

  QuSproutServer_initQubits_args(const QuSproutServer_initQubits_args&);
  QuSproutServer_initQubits_args& operator=(const QuSproutServer_initQubits_args&);
  QuSproutServer_initQubits_args() noexcept {
  }

  virtual ~QuSproutServer_initQubits_args() noexcept;
   ::InitQubitsReq req;

  _QuSproutServer_initQubits_args__isset __isset;

  void __set_req(const  ::InitQubitsReq& val);

  bool operator == (const QuSproutServer_initQubits_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_initQubits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_initQubits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_initQubits_pargs {
 public:


  virtual ~QuSproutServer_initQubits_pargs() noexcept;
  const  ::InitQubitsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_initQubits_result__isset {
  _QuSproutServer_initQubits_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_initQubits_result__isset;

class QuSproutServer_initQubits_result {
 public:

  QuSproutServer_initQubits_result(const QuSproutServer_initQubits_result&);
  QuSproutServer_initQubits_result& operator=(const QuSproutServer_initQubits_result&);
  QuSproutServer_initQubits_result() noexcept {
  }

  virtual ~QuSproutServer_initQubits_result() noexcept;
   ::InitQubitsResp success;

  _QuSproutServer_initQubits_result__isset __isset;

  void __set_success(const  ::InitQubitsResp& val);

  bool operator == (const QuSproutServer_initQubits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_initQubits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_initQubits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_initQubits_presult__isset {
  _QuSproutServer_initQubits_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_initQubits_presult__isset;

class QuSproutServer_initQubits_presult {
 public:


  virtual ~QuSproutServer_initQubits_presult() noexcept;
   ::InitQubitsResp* success;

  _QuSproutServer_initQubits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_sendCircuitCmd_args__isset {
  _QuSproutServer_sendCircuitCmd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_sendCircuitCmd_args__isset;

class QuSproutServer_sendCircuitCmd_args {
 public:

  QuSproutServer_sendCircuitCmd_args(const QuSproutServer_sendCircuitCmd_args&);
  QuSproutServer_sendCircuitCmd_args& operator=(const QuSproutServer_sendCircuitCmd_args&);
  QuSproutServer_sendCircuitCmd_args() noexcept {
  }

  virtual ~QuSproutServer_sendCircuitCmd_args() noexcept;
   ::SendCircuitCmdReq req;

  _QuSproutServer_sendCircuitCmd_args__isset __isset;

  void __set_req(const  ::SendCircuitCmdReq& val);

  bool operator == (const QuSproutServer_sendCircuitCmd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_sendCircuitCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_sendCircuitCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_sendCircuitCmd_pargs {
 public:


  virtual ~QuSproutServer_sendCircuitCmd_pargs() noexcept;
  const  ::SendCircuitCmdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_sendCircuitCmd_result__isset {
  _QuSproutServer_sendCircuitCmd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_sendCircuitCmd_result__isset;

class QuSproutServer_sendCircuitCmd_result {
 public:

  QuSproutServer_sendCircuitCmd_result(const QuSproutServer_sendCircuitCmd_result&);
  QuSproutServer_sendCircuitCmd_result& operator=(const QuSproutServer_sendCircuitCmd_result&);
  QuSproutServer_sendCircuitCmd_result() noexcept {
  }

  virtual ~QuSproutServer_sendCircuitCmd_result() noexcept;
   ::SendCircuitCmdResp success;

  _QuSproutServer_sendCircuitCmd_result__isset __isset;

  void __set_success(const  ::SendCircuitCmdResp& val);

  bool operator == (const QuSproutServer_sendCircuitCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_sendCircuitCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_sendCircuitCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_sendCircuitCmd_presult__isset {
  _QuSproutServer_sendCircuitCmd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_sendCircuitCmd_presult__isset;

class QuSproutServer_sendCircuitCmd_presult {
 public:


  virtual ~QuSproutServer_sendCircuitCmd_presult() noexcept;
   ::SendCircuitCmdResp* success;

  _QuSproutServer_sendCircuitCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_cancelCmd_args__isset {
  _QuSproutServer_cancelCmd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_cancelCmd_args__isset;

class QuSproutServer_cancelCmd_args {
 public:

  QuSproutServer_cancelCmd_args(const QuSproutServer_cancelCmd_args&);
  QuSproutServer_cancelCmd_args& operator=(const QuSproutServer_cancelCmd_args&);
  QuSproutServer_cancelCmd_args() noexcept {
  }

  virtual ~QuSproutServer_cancelCmd_args() noexcept;
   ::CancelCmdReq req;

  _QuSproutServer_cancelCmd_args__isset __isset;

  void __set_req(const  ::CancelCmdReq& val);

  bool operator == (const QuSproutServer_cancelCmd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_cancelCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_cancelCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_cancelCmd_pargs {
 public:


  virtual ~QuSproutServer_cancelCmd_pargs() noexcept;
  const  ::CancelCmdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_cancelCmd_result__isset {
  _QuSproutServer_cancelCmd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_cancelCmd_result__isset;

class QuSproutServer_cancelCmd_result {
 public:

  QuSproutServer_cancelCmd_result(const QuSproutServer_cancelCmd_result&);
  QuSproutServer_cancelCmd_result& operator=(const QuSproutServer_cancelCmd_result&);
  QuSproutServer_cancelCmd_result() noexcept {
  }

  virtual ~QuSproutServer_cancelCmd_result() noexcept;
   ::CancelCmdResp success;

  _QuSproutServer_cancelCmd_result__isset __isset;

  void __set_success(const  ::CancelCmdResp& val);

  bool operator == (const QuSproutServer_cancelCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_cancelCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_cancelCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_cancelCmd_presult__isset {
  _QuSproutServer_cancelCmd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_cancelCmd_presult__isset;

class QuSproutServer_cancelCmd_presult {
 public:


  virtual ~QuSproutServer_cancelCmd_presult() noexcept;
   ::CancelCmdResp* success;

  _QuSproutServer_cancelCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbAmp_args__isset {
  _QuSproutServer_getProbAmp_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbAmp_args__isset;

class QuSproutServer_getProbAmp_args {
 public:

  QuSproutServer_getProbAmp_args(const QuSproutServer_getProbAmp_args&);
  QuSproutServer_getProbAmp_args& operator=(const QuSproutServer_getProbAmp_args&);
  QuSproutServer_getProbAmp_args() noexcept {
  }

  virtual ~QuSproutServer_getProbAmp_args() noexcept;
   ::GetProbAmpReq req;

  _QuSproutServer_getProbAmp_args__isset __isset;

  void __set_req(const  ::GetProbAmpReq& val);

  bool operator == (const QuSproutServer_getProbAmp_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbAmp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbAmp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbAmp_pargs {
 public:


  virtual ~QuSproutServer_getProbAmp_pargs() noexcept;
  const  ::GetProbAmpReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbAmp_result__isset {
  _QuSproutServer_getProbAmp_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbAmp_result__isset;

class QuSproutServer_getProbAmp_result {
 public:

  QuSproutServer_getProbAmp_result(const QuSproutServer_getProbAmp_result&);
  QuSproutServer_getProbAmp_result& operator=(const QuSproutServer_getProbAmp_result&);
  QuSproutServer_getProbAmp_result() noexcept {
  }

  virtual ~QuSproutServer_getProbAmp_result() noexcept;
   ::GetProbAmpResp success;

  _QuSproutServer_getProbAmp_result__isset __isset;

  void __set_success(const  ::GetProbAmpResp& val);

  bool operator == (const QuSproutServer_getProbAmp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbAmp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbAmp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbAmp_presult__isset {
  _QuSproutServer_getProbAmp_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbAmp_presult__isset;

class QuSproutServer_getProbAmp_presult {
 public:


  virtual ~QuSproutServer_getProbAmp_presult() noexcept;
   ::GetProbAmpResp* success;

  _QuSproutServer_getProbAmp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbOfOutcome_args__isset {
  _QuSproutServer_getProbOfOutcome_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbOfOutcome_args__isset;

class QuSproutServer_getProbOfOutcome_args {
 public:

  QuSproutServer_getProbOfOutcome_args(const QuSproutServer_getProbOfOutcome_args&);
  QuSproutServer_getProbOfOutcome_args& operator=(const QuSproutServer_getProbOfOutcome_args&);
  QuSproutServer_getProbOfOutcome_args() noexcept {
  }

  virtual ~QuSproutServer_getProbOfOutcome_args() noexcept;
   ::GetProbOfOutcomeReq req;

  _QuSproutServer_getProbOfOutcome_args__isset __isset;

  void __set_req(const  ::GetProbOfOutcomeReq& val);

  bool operator == (const QuSproutServer_getProbOfOutcome_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfOutcome_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfOutcome_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbOfOutcome_pargs {
 public:


  virtual ~QuSproutServer_getProbOfOutcome_pargs() noexcept;
  const  ::GetProbOfOutcomeReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfOutcome_result__isset {
  _QuSproutServer_getProbOfOutcome_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfOutcome_result__isset;

class QuSproutServer_getProbOfOutcome_result {
 public:

  QuSproutServer_getProbOfOutcome_result(const QuSproutServer_getProbOfOutcome_result&);
  QuSproutServer_getProbOfOutcome_result& operator=(const QuSproutServer_getProbOfOutcome_result&);
  QuSproutServer_getProbOfOutcome_result() noexcept {
  }

  virtual ~QuSproutServer_getProbOfOutcome_result() noexcept;
   ::GetProbOfOutcomeResp success;

  _QuSproutServer_getProbOfOutcome_result__isset __isset;

  void __set_success(const  ::GetProbOfOutcomeResp& val);

  bool operator == (const QuSproutServer_getProbOfOutcome_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfOutcome_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfOutcome_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfOutcome_presult__isset {
  _QuSproutServer_getProbOfOutcome_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfOutcome_presult__isset;

class QuSproutServer_getProbOfOutcome_presult {
 public:


  virtual ~QuSproutServer_getProbOfOutcome_presult() noexcept;
   ::GetProbOfOutcomeResp* success;

  _QuSproutServer_getProbOfOutcome_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getProbOfAllOutcome_args__isset {
  _QuSproutServer_getProbOfAllOutcome_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getProbOfAllOutcome_args__isset;

class QuSproutServer_getProbOfAllOutcome_args {
 public:

  QuSproutServer_getProbOfAllOutcome_args(const QuSproutServer_getProbOfAllOutcome_args&);
  QuSproutServer_getProbOfAllOutcome_args& operator=(const QuSproutServer_getProbOfAllOutcome_args&);
  QuSproutServer_getProbOfAllOutcome_args() noexcept {
  }

  virtual ~QuSproutServer_getProbOfAllOutcome_args() noexcept;
   ::GetProbOfAllOutcomReq req;

  _QuSproutServer_getProbOfAllOutcome_args__isset __isset;

  void __set_req(const  ::GetProbOfAllOutcomReq& val);

  bool operator == (const QuSproutServer_getProbOfAllOutcome_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfAllOutcome_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfAllOutcome_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getProbOfAllOutcome_pargs {
 public:


  virtual ~QuSproutServer_getProbOfAllOutcome_pargs() noexcept;
  const  ::GetProbOfAllOutcomReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfAllOutcome_result__isset {
  _QuSproutServer_getProbOfAllOutcome_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfAllOutcome_result__isset;

class QuSproutServer_getProbOfAllOutcome_result {
 public:

  QuSproutServer_getProbOfAllOutcome_result(const QuSproutServer_getProbOfAllOutcome_result&);
  QuSproutServer_getProbOfAllOutcome_result& operator=(const QuSproutServer_getProbOfAllOutcome_result&);
  QuSproutServer_getProbOfAllOutcome_result() noexcept {
  }

  virtual ~QuSproutServer_getProbOfAllOutcome_result() noexcept;
   ::GetProbOfAllOutcomResp success;

  _QuSproutServer_getProbOfAllOutcome_result__isset __isset;

  void __set_success(const  ::GetProbOfAllOutcomResp& val);

  bool operator == (const QuSproutServer_getProbOfAllOutcome_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getProbOfAllOutcome_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getProbOfAllOutcome_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getProbOfAllOutcome_presult__isset {
  _QuSproutServer_getProbOfAllOutcome_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getProbOfAllOutcome_presult__isset;

class QuSproutServer_getProbOfAllOutcome_presult {
 public:


  virtual ~QuSproutServer_getProbOfAllOutcome_presult() noexcept;
   ::GetProbOfAllOutcomResp* success;

  _QuSproutServer_getProbOfAllOutcome_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getAllState_args__isset {
  _QuSproutServer_getAllState_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getAllState_args__isset;

class QuSproutServer_getAllState_args {
 public:

  QuSproutServer_getAllState_args(const QuSproutServer_getAllState_args&);
  QuSproutServer_getAllState_args& operator=(const QuSproutServer_getAllState_args&);
  QuSproutServer_getAllState_args() noexcept {
  }

  virtual ~QuSproutServer_getAllState_args() noexcept;
   ::GetAllStateReq req;

  _QuSproutServer_getAllState_args__isset __isset;

  void __set_req(const  ::GetAllStateReq& val);

  bool operator == (const QuSproutServer_getAllState_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getAllState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getAllState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getAllState_pargs {
 public:


  virtual ~QuSproutServer_getAllState_pargs() noexcept;
  const  ::GetAllStateReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getAllState_result__isset {
  _QuSproutServer_getAllState_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getAllState_result__isset;

class QuSproutServer_getAllState_result {
 public:

  QuSproutServer_getAllState_result(const QuSproutServer_getAllState_result&);
  QuSproutServer_getAllState_result& operator=(const QuSproutServer_getAllState_result&);
  QuSproutServer_getAllState_result() noexcept {
  }

  virtual ~QuSproutServer_getAllState_result() noexcept;
   ::GetAllStateResp success;

  _QuSproutServer_getAllState_result__isset __isset;

  void __set_success(const  ::GetAllStateResp& val);

  bool operator == (const QuSproutServer_getAllState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getAllState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getAllState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getAllState_presult__isset {
  _QuSproutServer_getAllState_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getAllState_presult__isset;

class QuSproutServer_getAllState_presult {
 public:


  virtual ~QuSproutServer_getAllState_presult() noexcept;
   ::GetAllStateResp* success;

  _QuSproutServer_getAllState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_run_args__isset {
  _QuSproutServer_run_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_run_args__isset;

class QuSproutServer_run_args {
 public:

  QuSproutServer_run_args(const QuSproutServer_run_args&);
  QuSproutServer_run_args& operator=(const QuSproutServer_run_args&);
  QuSproutServer_run_args() noexcept {
  }

  virtual ~QuSproutServer_run_args() noexcept;
   ::RunCircuitReq req;

  _QuSproutServer_run_args__isset __isset;

  void __set_req(const  ::RunCircuitReq& val);

  bool operator == (const QuSproutServer_run_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_run_pargs {
 public:


  virtual ~QuSproutServer_run_pargs() noexcept;
  const  ::RunCircuitReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_run_result__isset {
  _QuSproutServer_run_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_run_result__isset;

class QuSproutServer_run_result {
 public:

  QuSproutServer_run_result(const QuSproutServer_run_result&);
  QuSproutServer_run_result& operator=(const QuSproutServer_run_result&);
  QuSproutServer_run_result() noexcept {
  }

  virtual ~QuSproutServer_run_result() noexcept;
   ::RunCircuitResp success;

  _QuSproutServer_run_result__isset __isset;

  void __set_success(const  ::RunCircuitResp& val);

  bool operator == (const QuSproutServer_run_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_run_presult__isset {
  _QuSproutServer_run_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_run_presult__isset;

class QuSproutServer_run_presult {
 public:


  virtual ~QuSproutServer_run_presult() noexcept;
   ::RunCircuitResp* success;

  _QuSproutServer_run_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_applyQFT_args__isset {
  _QuSproutServer_applyQFT_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_applyQFT_args__isset;

class QuSproutServer_applyQFT_args {
 public:

  QuSproutServer_applyQFT_args(const QuSproutServer_applyQFT_args&);
  QuSproutServer_applyQFT_args& operator=(const QuSproutServer_applyQFT_args&);
  QuSproutServer_applyQFT_args() noexcept {
  }

  virtual ~QuSproutServer_applyQFT_args() noexcept;
   ::ApplyQFTReq req;

  _QuSproutServer_applyQFT_args__isset __isset;

  void __set_req(const  ::ApplyQFTReq& val);

  bool operator == (const QuSproutServer_applyQFT_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_applyQFT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_applyQFT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_applyQFT_pargs {
 public:


  virtual ~QuSproutServer_applyQFT_pargs() noexcept;
  const  ::ApplyQFTReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_applyQFT_result__isset {
  _QuSproutServer_applyQFT_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_applyQFT_result__isset;

class QuSproutServer_applyQFT_result {
 public:

  QuSproutServer_applyQFT_result(const QuSproutServer_applyQFT_result&);
  QuSproutServer_applyQFT_result& operator=(const QuSproutServer_applyQFT_result&);
  QuSproutServer_applyQFT_result() noexcept {
  }

  virtual ~QuSproutServer_applyQFT_result() noexcept;
   ::ApplyQFTResp success;

  _QuSproutServer_applyQFT_result__isset __isset;

  void __set_success(const  ::ApplyQFTResp& val);

  bool operator == (const QuSproutServer_applyQFT_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_applyQFT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_applyQFT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_applyQFT_presult__isset {
  _QuSproutServer_applyQFT_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_applyQFT_presult__isset;

class QuSproutServer_applyQFT_presult {
 public:


  virtual ~QuSproutServer_applyQFT_presult() noexcept;
   ::ApplyQFTResp* success;

  _QuSproutServer_applyQFT_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_applyFullQFT_args__isset {
  _QuSproutServer_applyFullQFT_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_applyFullQFT_args__isset;

class QuSproutServer_applyFullQFT_args {
 public:

  QuSproutServer_applyFullQFT_args(const QuSproutServer_applyFullQFT_args&);
  QuSproutServer_applyFullQFT_args& operator=(const QuSproutServer_applyFullQFT_args&);
  QuSproutServer_applyFullQFT_args() noexcept {
  }

  virtual ~QuSproutServer_applyFullQFT_args() noexcept;
   ::ApplyFullQFTReq req;

  _QuSproutServer_applyFullQFT_args__isset __isset;

  void __set_req(const  ::ApplyFullQFTReq& val);

  bool operator == (const QuSproutServer_applyFullQFT_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_applyFullQFT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_applyFullQFT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_applyFullQFT_pargs {
 public:


  virtual ~QuSproutServer_applyFullQFT_pargs() noexcept;
  const  ::ApplyFullQFTReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_applyFullQFT_result__isset {
  _QuSproutServer_applyFullQFT_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_applyFullQFT_result__isset;

class QuSproutServer_applyFullQFT_result {
 public:

  QuSproutServer_applyFullQFT_result(const QuSproutServer_applyFullQFT_result&);
  QuSproutServer_applyFullQFT_result& operator=(const QuSproutServer_applyFullQFT_result&);
  QuSproutServer_applyFullQFT_result() noexcept {
  }

  virtual ~QuSproutServer_applyFullQFT_result() noexcept;
   ::ApplyFullQFTResp success;

  _QuSproutServer_applyFullQFT_result__isset __isset;

  void __set_success(const  ::ApplyFullQFTResp& val);

  bool operator == (const QuSproutServer_applyFullQFT_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_applyFullQFT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_applyFullQFT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_applyFullQFT_presult__isset {
  _QuSproutServer_applyFullQFT_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_applyFullQFT_presult__isset;

class QuSproutServer_applyFullQFT_presult {
 public:


  virtual ~QuSproutServer_applyFullQFT_presult() noexcept;
   ::ApplyFullQFTResp* success;

  _QuSproutServer_applyFullQFT_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getExpecPauliProd_args__isset {
  _QuSproutServer_getExpecPauliProd_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getExpecPauliProd_args__isset;

class QuSproutServer_getExpecPauliProd_args {
 public:

  QuSproutServer_getExpecPauliProd_args(const QuSproutServer_getExpecPauliProd_args&);
  QuSproutServer_getExpecPauliProd_args& operator=(const QuSproutServer_getExpecPauliProd_args&);
  QuSproutServer_getExpecPauliProd_args() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliProd_args() noexcept;
   ::GetExpecPauliProdReq req;

  _QuSproutServer_getExpecPauliProd_args__isset __isset;

  void __set_req(const  ::GetExpecPauliProdReq& val);

  bool operator == (const QuSproutServer_getExpecPauliProd_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliProd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliProd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getExpecPauliProd_pargs {
 public:


  virtual ~QuSproutServer_getExpecPauliProd_pargs() noexcept;
  const  ::GetExpecPauliProdReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliProd_result__isset {
  _QuSproutServer_getExpecPauliProd_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliProd_result__isset;

class QuSproutServer_getExpecPauliProd_result {
 public:

  QuSproutServer_getExpecPauliProd_result(const QuSproutServer_getExpecPauliProd_result&);
  QuSproutServer_getExpecPauliProd_result& operator=(const QuSproutServer_getExpecPauliProd_result&);
  QuSproutServer_getExpecPauliProd_result() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliProd_result() noexcept;
   ::GetExpecPauliProdResp success;

  _QuSproutServer_getExpecPauliProd_result__isset __isset;

  void __set_success(const  ::GetExpecPauliProdResp& val);

  bool operator == (const QuSproutServer_getExpecPauliProd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliProd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliProd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliProd_presult__isset {
  _QuSproutServer_getExpecPauliProd_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliProd_presult__isset;

class QuSproutServer_getExpecPauliProd_presult {
 public:


  virtual ~QuSproutServer_getExpecPauliProd_presult() noexcept;
   ::GetExpecPauliProdResp* success;

  _QuSproutServer_getExpecPauliProd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuSproutServer_getExpecPauliSum_args__isset {
  _QuSproutServer_getExpecPauliSum_args__isset() : req(false) {}
  bool req :1;
} _QuSproutServer_getExpecPauliSum_args__isset;

class QuSproutServer_getExpecPauliSum_args {
 public:

  QuSproutServer_getExpecPauliSum_args(const QuSproutServer_getExpecPauliSum_args&);
  QuSproutServer_getExpecPauliSum_args& operator=(const QuSproutServer_getExpecPauliSum_args&);
  QuSproutServer_getExpecPauliSum_args() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliSum_args() noexcept;
   ::GetExpecPauliSumReq req;

  _QuSproutServer_getExpecPauliSum_args__isset __isset;

  void __set_req(const  ::GetExpecPauliSumReq& val);

  bool operator == (const QuSproutServer_getExpecPauliSum_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliSum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliSum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuSproutServer_getExpecPauliSum_pargs {
 public:


  virtual ~QuSproutServer_getExpecPauliSum_pargs() noexcept;
  const  ::GetExpecPauliSumReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliSum_result__isset {
  _QuSproutServer_getExpecPauliSum_result__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliSum_result__isset;

class QuSproutServer_getExpecPauliSum_result {
 public:

  QuSproutServer_getExpecPauliSum_result(const QuSproutServer_getExpecPauliSum_result&);
  QuSproutServer_getExpecPauliSum_result& operator=(const QuSproutServer_getExpecPauliSum_result&);
  QuSproutServer_getExpecPauliSum_result() noexcept {
  }

  virtual ~QuSproutServer_getExpecPauliSum_result() noexcept;
   ::GetExpecPauliSumResp success;

  _QuSproutServer_getExpecPauliSum_result__isset __isset;

  void __set_success(const  ::GetExpecPauliSumResp& val);

  bool operator == (const QuSproutServer_getExpecPauliSum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QuSproutServer_getExpecPauliSum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuSproutServer_getExpecPauliSum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuSproutServer_getExpecPauliSum_presult__isset {
  _QuSproutServer_getExpecPauliSum_presult__isset() : success(false) {}
  bool success :1;
} _QuSproutServer_getExpecPauliSum_presult__isset;

class QuSproutServer_getExpecPauliSum_presult {
 public:


  virtual ~QuSproutServer_getExpecPauliSum_presult() noexcept;
   ::GetExpecPauliSumResp* success;

  _QuSproutServer_getExpecPauliSum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QuSproutServerClient : virtual public QuSproutServerIf {
 public:
  QuSproutServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QuSproutServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override;
  void send_initQubits(const  ::InitQubitsReq& req);
  void recv_initQubits( ::InitQubitsResp& _return);
  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override;
  void send_sendCircuitCmd(const  ::SendCircuitCmdReq& req);
  void recv_sendCircuitCmd( ::SendCircuitCmdResp& _return);
  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override;
  void send_cancelCmd(const  ::CancelCmdReq& req);
  void recv_cancelCmd( ::CancelCmdResp& _return);
  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override;
  void send_getProbAmp(const  ::GetProbAmpReq& req);
  void recv_getProbAmp( ::GetProbAmpResp& _return);
  void getProbOfOutcome( ::GetProbOfOutcomeResp& _return, const  ::GetProbOfOutcomeReq& req) override;
  void send_getProbOfOutcome(const  ::GetProbOfOutcomeReq& req);
  void recv_getProbOfOutcome( ::GetProbOfOutcomeResp& _return);
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override;
  void send_getProbOfAllOutcome(const  ::GetProbOfAllOutcomReq& req);
  void recv_getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return);
  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override;
  void send_getAllState(const  ::GetAllStateReq& req);
  void recv_getAllState( ::GetAllStateResp& _return);
  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override;
  void send_run(const  ::RunCircuitReq& req);
  void recv_run( ::RunCircuitResp& _return);
  void applyQFT( ::ApplyQFTResp& _return, const  ::ApplyQFTReq& req) override;
  void send_applyQFT(const  ::ApplyQFTReq& req);
  void recv_applyQFT( ::ApplyQFTResp& _return);
  void applyFullQFT( ::ApplyFullQFTResp& _return, const  ::ApplyFullQFTReq& req) override;
  void send_applyFullQFT(const  ::ApplyFullQFTReq& req);
  void recv_applyFullQFT( ::ApplyFullQFTResp& _return);
  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override;
  void send_getExpecPauliProd(const  ::GetExpecPauliProdReq& req);
  void recv_getExpecPauliProd( ::GetExpecPauliProdResp& _return);
  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override;
  void send_getExpecPauliSum(const  ::GetExpecPauliSumReq& req);
  void recv_getExpecPauliSum( ::GetExpecPauliSumResp& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuSproutServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<QuSproutServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (QuSproutServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initQubits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCircuitCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbAmp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbOfOutcome(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProbOfAllOutcome(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyQFT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyFullQFT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExpecPauliProd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExpecPauliSum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuSproutServerProcessor(::std::shared_ptr<QuSproutServerIf> iface) :
    iface_(iface) {
    processMap_["initQubits"] = &QuSproutServerProcessor::process_initQubits;
    processMap_["sendCircuitCmd"] = &QuSproutServerProcessor::process_sendCircuitCmd;
    processMap_["cancelCmd"] = &QuSproutServerProcessor::process_cancelCmd;
    processMap_["getProbAmp"] = &QuSproutServerProcessor::process_getProbAmp;
    processMap_["getProbOfOutcome"] = &QuSproutServerProcessor::process_getProbOfOutcome;
    processMap_["getProbOfAllOutcome"] = &QuSproutServerProcessor::process_getProbOfAllOutcome;
    processMap_["getAllState"] = &QuSproutServerProcessor::process_getAllState;
    processMap_["run"] = &QuSproutServerProcessor::process_run;
    processMap_["applyQFT"] = &QuSproutServerProcessor::process_applyQFT;
    processMap_["applyFullQFT"] = &QuSproutServerProcessor::process_applyFullQFT;
    processMap_["getExpecPauliProd"] = &QuSproutServerProcessor::process_getExpecPauliProd;
    processMap_["getExpecPauliSum"] = &QuSproutServerProcessor::process_getExpecPauliSum;
  }

  virtual ~QuSproutServerProcessor() {}
};

class QuSproutServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuSproutServerProcessorFactory(const ::std::shared_ptr< QuSproutServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< QuSproutServerIfFactory > handlerFactory_;
};

class QuSproutServerMultiface : virtual public QuSproutServerIf {
 public:
  QuSproutServerMultiface(std::vector<std::shared_ptr<QuSproutServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuSproutServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<QuSproutServerIf> > ifaces_;
  QuSproutServerMultiface() {}
  void add(::std::shared_ptr<QuSproutServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initQubits(_return, req);
    }
    ifaces_[i]->initQubits(_return, req);
    return;
  }

  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCircuitCmd(_return, req);
    }
    ifaces_[i]->sendCircuitCmd(_return, req);
    return;
  }

  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelCmd(_return, req);
    }
    ifaces_[i]->cancelCmd(_return, req);
    return;
  }

  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbAmp(_return, req);
    }
    ifaces_[i]->getProbAmp(_return, req);
    return;
  }

  void getProbOfOutcome( ::GetProbOfOutcomeResp& _return, const  ::GetProbOfOutcomeReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbOfOutcome(_return, req);
    }
    ifaces_[i]->getProbOfOutcome(_return, req);
    return;
  }

  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProbOfAllOutcome(_return, req);
    }
    ifaces_[i]->getProbOfAllOutcome(_return, req);
    return;
  }

  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllState(_return, req);
    }
    ifaces_[i]->getAllState(_return, req);
    return;
  }

  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run(_return, req);
    }
    ifaces_[i]->run(_return, req);
    return;
  }

  void applyQFT( ::ApplyQFTResp& _return, const  ::ApplyQFTReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyQFT(_return, req);
    }
    ifaces_[i]->applyQFT(_return, req);
    return;
  }

  void applyFullQFT( ::ApplyFullQFTResp& _return, const  ::ApplyFullQFTReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyFullQFT(_return, req);
    }
    ifaces_[i]->applyFullQFT(_return, req);
    return;
  }

  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExpecPauliProd(_return, req);
    }
    ifaces_[i]->getExpecPauliProd(_return, req);
    return;
  }

  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExpecPauliSum(_return, req);
    }
    ifaces_[i]->getExpecPauliSum(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QuSproutServerConcurrentClient : virtual public QuSproutServerIf {
 public:
  QuSproutServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  QuSproutServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initQubits( ::InitQubitsResp& _return, const  ::InitQubitsReq& req) override;
  int32_t send_initQubits(const  ::InitQubitsReq& req);
  void recv_initQubits( ::InitQubitsResp& _return, const int32_t seqid);
  void sendCircuitCmd( ::SendCircuitCmdResp& _return, const  ::SendCircuitCmdReq& req) override;
  int32_t send_sendCircuitCmd(const  ::SendCircuitCmdReq& req);
  void recv_sendCircuitCmd( ::SendCircuitCmdResp& _return, const int32_t seqid);
  void cancelCmd( ::CancelCmdResp& _return, const  ::CancelCmdReq& req) override;
  int32_t send_cancelCmd(const  ::CancelCmdReq& req);
  void recv_cancelCmd( ::CancelCmdResp& _return, const int32_t seqid);
  void getProbAmp( ::GetProbAmpResp& _return, const  ::GetProbAmpReq& req) override;
  int32_t send_getProbAmp(const  ::GetProbAmpReq& req);
  void recv_getProbAmp( ::GetProbAmpResp& _return, const int32_t seqid);
  void getProbOfOutcome( ::GetProbOfOutcomeResp& _return, const  ::GetProbOfOutcomeReq& req) override;
  int32_t send_getProbOfOutcome(const  ::GetProbOfOutcomeReq& req);
  void recv_getProbOfOutcome( ::GetProbOfOutcomeResp& _return, const int32_t seqid);
  void getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const  ::GetProbOfAllOutcomReq& req) override;
  int32_t send_getProbOfAllOutcome(const  ::GetProbOfAllOutcomReq& req);
  void recv_getProbOfAllOutcome( ::GetProbOfAllOutcomResp& _return, const int32_t seqid);
  void getAllState( ::GetAllStateResp& _return, const  ::GetAllStateReq& req) override;
  int32_t send_getAllState(const  ::GetAllStateReq& req);
  void recv_getAllState( ::GetAllStateResp& _return, const int32_t seqid);
  void run( ::RunCircuitResp& _return, const  ::RunCircuitReq& req) override;
  int32_t send_run(const  ::RunCircuitReq& req);
  void recv_run( ::RunCircuitResp& _return, const int32_t seqid);
  void applyQFT( ::ApplyQFTResp& _return, const  ::ApplyQFTReq& req) override;
  int32_t send_applyQFT(const  ::ApplyQFTReq& req);
  void recv_applyQFT( ::ApplyQFTResp& _return, const int32_t seqid);
  void applyFullQFT( ::ApplyFullQFTResp& _return, const  ::ApplyFullQFTReq& req) override;
  int32_t send_applyFullQFT(const  ::ApplyFullQFTReq& req);
  void recv_applyFullQFT( ::ApplyFullQFTResp& _return, const int32_t seqid);
  void getExpecPauliProd( ::GetExpecPauliProdResp& _return, const  ::GetExpecPauliProdReq& req) override;
  int32_t send_getExpecPauliProd(const  ::GetExpecPauliProdReq& req);
  void recv_getExpecPauliProd( ::GetExpecPauliProdResp& _return, const int32_t seqid);
  void getExpecPauliSum( ::GetExpecPauliSumResp& _return, const  ::GetExpecPauliSumReq& req) override;
  int32_t send_getExpecPauliSum(const  ::GetExpecPauliSumReq& req);
  void recv_getExpecPauliSum( ::GetExpecPauliSumResp& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
